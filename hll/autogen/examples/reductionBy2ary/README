2016Oct24 - dvillen

= This examples implements an OCR equivalent to MPI_ALLREDUCE.
  This reduction example uses as an example the binaryTree_forkjoin example.
  At the transition nodes of the fork-join tree, the reduction algorithm
  was introduced in order to performed a single reduction.

  The figure "y_before_insertion_reductionBy2ary.dot.svg" shows the fork-join
  tree before the insertion of the reduction algorithm.

  The figure "y_reductionAlgo.dot.svg" shows the fork-join graph with the
  inserted reduction algorithm.
  The figure "y_reductionAlgo_runtime.dot.svg" shows its run-time details.

= The following add-ons are required as labeled EDT are used:
    In the reductionBy2ary.py:
        #define ENABLE_EXTENSION_LABELING
        #include "extensions/ocr-labeling.h"

    On the comment line:
        CONFIG_FLAGS=--guid=LABELED OCR_TYPE=x86-mpi make run

= Add at the beginning of the Autogen file:
    OA.addHeader(G, '#define ENABLE_EXTENSION_LABELING')
    OA.addHeader(G, '#include "extensions/ocr-labeling.h"')
  If using the C file directly, make sure that the corresponding C code
  is in place and used.

= A global DBK is used to hold the labeled EDT map



= The number of "MPI ranks" used is set in global_data.c::create_globalData(...)
  by setting the variable "mpi_count_needed" to the desired number of transition
  nodes, i.e. MPI ranks.
  In normal usage, "mpi_count_needed" would be set to the number of EDTs which
  will participate in the reduction.

= In the file reduction2ary.h, the values on which the reduction are to be done
  have been abstracted.  The values type is "R2aryValue", which is currently
  a 8-byte float. The default operation is "add_R2aryValue(...)", which is simply
  the addition of two 8-bytes floats.

=The test script "btest" assumes that the command
 "CONFIG_FLAGS=--guid=LABELED OCR_TYPE=x86-mpi make run"
 can be successfully run.
 First "btest" with use Autogen to create the base OCR code, the it will run it.
 Finally it will check that the run completed succesfully.

= The reduction is done along an approximate binary tree.  It is approximate
  if the number of "MPI ranks" is not a power-of-2.

  For 8 "MPI ranks", the reduction tree proceeds as follows

                 0  1   2  3  4  5 6  7
                  \ |   | /   | /  |  /
                   \|   |/    |/   | /
                    a   b     c    d
                     \  |     |  /
                      \ |     | /
                        e     f
                         \   /
                          \ /
                           g

  where the nodes 0,1,2,...7 are the starting "MPI ranks".  A labelled EDT map
  is used to generate the intermediate EDTs a,b,c,...,g.  A forking tree for the
  distribution of the results is automatically generated by the intermediate EDTs.
  In the scenario, it is required for the starting EDTs 0,1,2,3,...,7 provide
  the ending nodes for the forking process, where the result of the reduction will
  distributed.










