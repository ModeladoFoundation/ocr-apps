//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---  applu.incl
//---------------------------------------------------------------------
//---------------------------------------------------------------------

//---------------------------------------------------------------------
// npbparams.h defines parameters that depend on the class and
// number of nodes
//---------------------------------------------------------------------

#include "npbparams.h"
#include "type.h"

#include "HTA.h"
#include "HTA_operations.h"

//---------------------------------------------------------------------
// parameters which can be overridden in runtime config file
// isiz1,isiz2,isiz3 give the maximum size
// ipr = 1 to print out verbose information
// omega = 2.0 is correct for all classes
// tolrsd is tolerance levels for steady state residuals
//---------------------------------------------------------------------
#define IPR_DEFAULT     1
#define OMEGA_DEFAULT   1.2
#define TOLRSD1_DEF     1.0e-08
#define TOLRSD2_DEF     1.0e-08
#define TOLRSD3_DEF     1.0e-08
#define TOLRSD4_DEF     1.0e-08
#define TOLRSD5_DEF     1.0e-08

#define C1              1.40e+00
#define C2              0.40e+00
#define C3              1.00e-01
#define C4              1.00e+00
#define C5              1.40e+00

extern int PROC, PROC_Z, PROC_Y, PROC_X;

//---------------------------------------------------------------------
// grid
//---------------------------------------------------------------------
/* common/cgcon/ */
extern double dxi, deta, dzeta;
extern double tx1, tx2, tx3;
extern double ty1, ty2, ty3;
extern double tz1, tz2, tz3;
extern int nx, ny, nz;
extern int nx0, ny0, nz0;
extern int ist, iend;
extern int jst, jend;
extern int ii1, ii2;
extern int ji1, ji2;
extern int ki1, ki2;

//---------------------------------------------------------------------
// dissipation
//---------------------------------------------------------------------
/* common/disp/ */
extern double dx1, dx2, dx3, dx4, dx5;
extern double dy1, dy2, dy3, dy4, dy5;
extern double dz1, dz2, dz3, dz4, dz5;
extern double dssp;

//---------------------------------------------------------------------
// field variables and residuals
// to improve cache performance, second two dimensions padded by 1
// for even number sizes only.
// Note: corresponding array (called "v") in routines blts, buts,
// and l2norm are similarly padded
//---------------------------------------------------------------------
/* common/cvar/ */
// extern double u    [ISIZ3][ISIZ2/2*2+1][ISIZ1/2*2+1][5];
// extern double rsd  [ISIZ3][ISIZ2/2*2+1][ISIZ1/2*2+1][5];
// extern double frct [ISIZ3][ISIZ2/2*2+1][ISIZ1/2*2+1][5];
// extern double flux [ISIZ1][5];
// extern double qs   [ISIZ3][ISIZ2/2*2+1][ISIZ1/2*2+1];
// extern double rho_i[ISIZ3][ISIZ2/2*2+1][ISIZ1/2*2+1];

//---------------------------------------------------------------------
// output control parameters
//---------------------------------------------------------------------
/* common/cprcon/ */
extern int ipr, inorm;

//---------------------------------------------------------------------
// newton-raphson iteration control parameters
//---------------------------------------------------------------------
/* common/ctscon/ */
// extern double dt, omega, tolrsd[5], rsdnm[5], errnm[5], frc, ttotal;
extern double dt, omega, tolrsd[5], ttotal;
extern int itmax, invert;


/* common/cjac/ */
// extern double a[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double b[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double c[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double d[ISIZ2][ISIZ1/2*2+1][5][5];

/* common/cjacu/ */
// extern double au[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double bu[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double cu[ISIZ2][ISIZ1/2*2+1][5][5];
// extern double du[ISIZ2][ISIZ1/2*2+1][5][5];


//---------------------------------------------------------------------
// coefficients of the exact solution
//---------------------------------------------------------------------
/* common/cexact/ */
extern double ce[5][13];


//---------------------------------------------------------------------
// Thread synchronization for pipeline operation
//---------------------------------------------------------------------
/* common /threadinfo1/ */
//extern int isync[ISIZ2+1];
/* common /threadinfo2/ */
//extern int mthreadnum, iam;
//#pragma omp threadprivate(mthreadnum,iam)

//---------------------------------------------------------------------
// HTA definitions
//---------------------------------------------------------------------
// #ifndef SPMD_PIL
// HTA* u_HTA;
// HTA* rsd_HTA;
// HTA* frct_HTA;
// HTA* qs_HTA;
// HTA* rho_i_HTA;
// HTA* sum_HTA;
// HTA* err_HTA;
// #endif

extern int check_bound;
extern HTA *ptr_rsd_HTA[128];

//---------------------------------------------------------------------
// timers
//---------------------------------------------------------------------
/* common/timer/ */
extern double maxtime;
extern logical timeron;
#define t_total   1
//#define t_rhsx    2
//#define t_rhsy    3
//#define t_rhsz    4
#define t_rhs     2
//#define t_jacld   6
#define t_blts    3
//#define t_jacu    8
#define t_buts    4
#define t_add     5
#define t_l2norm  6
#define t_sync_rhs 7
#define t_sync_blts 8
#define t_sync_buts 9
#define t_last    9

void read_input();
void domain();
void setcoeff();
// void setbv();
void exact(int i, int j, int k, double u000ijk[]);
// void setiv();
// void erhs();
// void ssor(int niter);
// void rhs();
// void l2norm (int ldx, int ldy, int ldz, int nx0, int ny0, int nz0,
//      int ist, int iend, int jst, int jend,
//      double v[][ldy/2*2+1][ldx/2*2+1][5], double sum[5]);
// void jacld(int k);
// void blts(int ldmx, int ldmy, int ldmz, int nx, int ny, int nz, int k,
//     double omega,
//     double v[ldmz][ldmy/2*2+1][ldmx/2*2+1][5],
//     double ldz[ldmy][ldmx/2*2+1][5][5],
//     double ldy[ldmy][ldmx/2*2+1][5][5],
//     double ldx[ldmy][ldmx/2*2+1][5][5],
//     double d[ldmy][ldmx/2*2+1][5][5],
//     int ist, int iend, int jst, int jend, int nx0, int ny0);
// void jacu(int k);
// void buts(int ldmx, int ldmy, int ldmz, int nx, int ny, int nz, int k,
//     double omega,
//     double v[ldmz][ldmy/2*2+1][ldmx/2*2+1][5],
//     double tv[ldmy][ldmx/2*2+1][5],
//     double d[ldmy][ldmx/2*2+1][5][5],
//     double udx[ldmy][ldmx/2*2+1][5][5],
//     double udy[ldmy][ldmx/2*2+1][5][5],
//     double udz[ldmy][ldmx/2*2+1][5][5],
//     int ist, int iend, int jst, int jend, int nx0, int ny0);
// void error();
// void sync_left(int ldmx, int ldmy, int ldmz,
//                double v[ldmz][ldmy/2*2+1][ldmx/2*2+1][5]);
// void sync_right(int ldmx, int ldmy, int ldmz,
//                 double v[ldmz][ldmy/2*2+1][ldmx/2*2+1][5]);
// void pintgr();
void verify(double xcr[5], double xce[5], double xci,
            char *Class, logical *verified);

// HTA Functions *****************************************
void sync_boundary(int pid, HTA* h1);
void sync_boundary_HTA(HTA* dest, HTA* h1);
void sync_boundary_assign(HTA *h1);
void sync_boundary_assign_sel(HTA* h, int total, int iter, int propag);
void setbv_HTA(HTA *h1);
void setbv_op_HTA(HTA* h1);
void setiv_HTA(HTA *h1);
void setiv_op_HTA(HTA* h1);
void erhs_HTA(int pid, HTA *h1, HTA *h2);
void erhs_init_ce_HTA(HTA* h1);
void erhs_flux_HTA(HTA* d, HTA* h1);
void ssor_HTA(int niter, int pid, double sum[5], HTA *h1, HTA *h2, HTA *h3, HTA *h4, HTA *h5, HTA *h6);
void mulscalar(HTA* h1, void* scalar);
void muladd(HTA* h1, HTA* h2, void* scalar);
void rhs_HTA(int pid, HTA *h1, HTA *h2, HTA *h3, HTA *h4, HTA *h5);
void rhs_compute_HTA(HTA* h1, HTA* h2, HTA* h3, HTA* h4, HTA* h5);
void l2norm_HTA(int pid, double sum[5], HTA *h1, HTA *h2);
void sum_sq_HTA(HTA* d, HTA* h1);
int selector(HTA *h, Tuple t);
void blts_HTA(int iter, int pid, HTA *h1, HTA *h2, HTA *h3, HTA *h4);
void jacld_blts_compute2_HTA(HTA* h1, HTA* h2, HTA* h3, HTA* h4);
void buts_HTA(int iter, int pid, HTA *h1, HTA *h2, HTA *h3, HTA *h4);
void jacu_buts_compute2_HTA(HTA* h1, HTA* h2, HTA* h3, HTA* h4);
void error_HTA(double error[5], int pid, HTA *h1, HTA *h2);
void error_sq_HTA(HTA* d_tile, HTA* h1);
void pintgr_HTA(int pid, int pi[3], double *value, HTA *h1);
void pintgr_init1_HTA(HTA* h1, HTA* h2, HTA* h3);
void pintgr_init2_HTA(HTA* h1, HTA* h2, HTA* h3);
void pintgr_init3_HTA(HTA* h1, HTA* h2, HTA* h3);
void frc1_calc(HTA* h1, HTA* h2, void* s);
void frc2_calc(HTA* h1, HTA* h2, void* s);
void frc3_calc(HTA* h1, HTA* h2, void* s);
//---------------------------------------------------------------------
//   end of include file
//---------------------------------------------------------------------
