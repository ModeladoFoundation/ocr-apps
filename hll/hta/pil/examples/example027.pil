// example027.pil

// an example that test splitting and merging of index_array by having
// different numbers of gpps in data_array for each iteration.

int target;
gpp_t index_array;
gpp_t data_array;

int i;
int iter;

void func1(int *target, gpp_t index_array, gpp_t data_array, int i, int iter)
{
	int *ia = (int *) index_array.ptr;
	gpp_t *da = (gpp_t *) data_array.ptr;
	int beg = ia[0];
	int end = ia[1];
	int num = end-beg;

	int j;
	for (j = 0; j < num; j++)
	{
		int *data = (int*) da[j].ptr;
		printf("node 1 iteration %d: da[%d]: %d  beg: %d  end: %d  num: %d\n", i, j, *data, beg, end, num); fflush(stdout);
		(*data)++;
	}

	*target = 2;
}

void func2(int *target, gpp_t index_array, gpp_t data_array, int i, int iter)
{
	int *ia = (int *) index_array.ptr;
	gpp_t *da = (gpp_t *) data_array.ptr;
	int beg = ia[0];
	int end = ia[1];
	int num = end-beg;

	int j;
	for (j = 0; j < num; j++)
	{
		int *data = (int*) da[j].ptr;
		printf("node 2 iteration %d: da[%d]: %d  beg: %d  end: %d  num: %d\n", i, j, *data, beg, end, num); fflush(stdout);
	}

	*target = 0;
}

node(1, i, [0:1:iter], target, [2], func1(&target, index_array, data_array, i, iter))
node(2, i, [0:1:iter], target, [0], func2(&target, index_array, data_array, i, iter))

void pil_main(int argc, char **argv)
{
	int i = 0;
	int iter = 3;
	gpp_t index_array, data_array;
	pil_init(&index_array, &data_array);

	pil_alloc(&index_array, (iter+2)*sizeof(int));
	pil_alloc(&data_array, 2*(iter+1)*sizeof(gpp_t));
	int *ia = (int *) index_array.ptr;
	gpp_t *da = (gpp_t *) data_array.ptr;

	int cur = 0;
	ia[0] = 0;
	for (i = 0; i <= iter; i++)
	{
		int num = 1 + 2*(i%2);
		ia[i+1] = ia[i] + num;
		int j;
		for (j = 0; j < num; j++) {
			pil_alloc(&da[cur], sizeof(int));
			int *p = (int *) da[cur].ptr;
			*p = cur;
			cur++;
		}
	}

	pil_enter(1, 4, index_array, data_array, i, iter);
}
