// Example: A linear broadcast.

#define VAL (1.2345)
#define BCAST_SOURCE (0)

int pid;
int idx;
uint32_t target_id;
int np;
int src;
int dest;
int next_dest;
int offset;
size_t size;

gpp_t index_array;
gpp_t data_array;
gpp_t buf;

void _bcast(uint32_t *target_id, gpp_t index_array, gpp_t data_array, int pid, int np, int src, int *next_dest, size_t size, int offset, gpp_t buf)
{
    *next_dest = 0; // start from pid = 0
    if(pid == src) { // This one is the source
        *target_id = 1002;
    } else { // one of the receiver
        *target_id = 1004;
    }
}

void _bcast_src(uint32_t *target_id, gpp_t index_array, gpp_t data_array, int pid, int np, int src, int *next_dest, int *dest, size_t size, int offset, gpp_t buf)
{
    if(*next_dest == src) (*next_dest)++; // skip self
    if(*next_dest < np) {
        *dest = *next_dest;
        (*next_dest)++;
        *target_id = 1003;
    } else {
        *target_id = 0;
    }
}

void dummy_exit(uint32_t *target_id, gpp_t index_array, gpp_t data_array)
{
    *target_id = 0;
}

// broadcast (linear for now)
node(1001, pid, idx, [0:1:0], target_id, [0], [1002, 1004], _bcast(&target_id, index_array, data_array, pid, np, src, &next_dest, size, offset, buf))
node(1002, pid, idx, [0:1:0], target_id, [1001, 1003], [1003, 0], _bcast_src(&target_id, index_array, data_array, pid, np, src, &next_dest, &dest, size, offset, buf))
pil_send(1003, pid, [1002], [1002], dest, size, offset, buf)
pil_recv(1004, pid, [1001], [0], src, size, offset, buf)
//node(1005, pid, idx, [0:1:0], target_id, [1002, 1004], [0], _dummy_exit(&target_id, index_array, data_array))


void pil_main(int argc, char **argv, int pid)
{
    int i;
    gpp_t index_array, data_array;
    int np;
    int src, offset;
    int next_dest;
    size_t size;
    gpp_t buf;
    const double val = VAL;
    double result = 0.0;

    // Broadcast a double value
    pil_init(&index_array, &data_array);
    np = pil_get_nwCount();
    src = BCAST_SOURCE;
    // Setup broadcast buffer
    size = sizeof(double);
    offset = 0;
    pil_alloc(&buf, size);
    if(pid == src)
        *((double*)buf.ptr) = val;
    else
        *((double*)buf.ptr) = 0.0;

    for(i=0; i<200; i++) {
        pil_enter(1001, pid, 9, index_array, data_array, pid, np, src, &next_dest, size, offset, buf);
    }
    // At this point, the broadcast is done
    result = *((double*)buf.ptr);

    // Verification
    if (result == VAL) {
        printf("%d: SUCCESS\n", pid);
    } else {
        printf("%d: FAILURE (%.4lf)\n", pid, result);
    }
}
