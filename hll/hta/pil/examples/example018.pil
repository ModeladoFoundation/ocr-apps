// Example that has two node calls

// global data
int i;
int target;
gpp_t index_array;
gpp_t data_array;
int a;
int b;
int c;

// header functions
void f(int *target, gpp_t index_array, gpp_t data_array)
{
	fprintf(stdout, "This statement should only appear after the computation!\n");
	*target = 0;
}

void g(int *target, gpp_t index_array, gpp_t data_array, int *a, int *b, int *c)
{
	*a = 1;
	*b = 2;
	*c = 0;
	fprintf(stdout, "a: %d  b: %d  c: %d\n", *a, *b, *c);
	fflush(stdout);
	*target = 3;
}

void h(int *target, gpp_t index_array, gpp_t data_array, int a, int b, int *c)
{
	*c = a + b;
	fprintf(stdout, "a: %d  b: %d  c: %d\n", a, b, *c);
	fflush(stdout);
	*target = 0;
}

// pil program
node(1, NULL, [1:1:1], target, [0], f(&target, index_array, data_array))
node(2, NULL, [1:1:1], target, [3], g(&target, index_array, data_array, &a, &b, &c))
node(3, NULL, [1:1:1], target, [0], h(&target, index_array, data_array, a, b, &c))

//void pil_main(int argc, char **argv)
void pil_main()
{
	int a, b, c;
	gpp_t index_array, data_array;
	pil_init(&index_array, &data_array);
	//pil_enter(2, 3, a, b);
	pil_enter(2, 5, index_array, data_array, &a, &b, &c);
	pil_enter(1, 2, index_array, data_array);
	printf("c: %d\n", c);
}
