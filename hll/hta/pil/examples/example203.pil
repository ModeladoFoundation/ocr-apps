// Example 25: A basic barrier test.

#define N (500)

int i;
int barrier_num;
int rank;
int target;
gpp_t index_array;
gpp_t data_array;

void f(int *target, gpp_t index_array, gpp_t data_array, int rank, int barrier_num)
{
	//fprintf(stdout, "%d: before barrier\n", rank); fflush(stdout);
	//pil_barrier_all(rank);
	//fprintf(stdout, "%d: after barrier\n", rank); fflush(stdout);
	//printf("%d: f number %d\n", rank, barrier_num); fflush(stdout);
	pil_barrier_all(rank);
	*target = 0;
}

node(1, rank, i, [1:1:1], target, [0], [0], f(&target, index_array, data_array, rank, barrier_num))

void pil_main(int argc, char **argv, int rank)
{
	gpp_t index_array;
	gpp_t data_array;
	int barrier_num;
	pil_init(&index_array, &data_array);

	if (rank == 0) {
		printf("performing %d barriers...", N); fflush(stdout);
	}

	for (barrier_num = 0; barrier_num < N; barrier_num++) {
		//printf("%d: pil_enter number %d\n", rank, barrier_num); fflush(stdout);
		pil_enter(1, rank, 3, index_array, data_array, rank, barrier_num);
	}

	if (rank == 0) {
		printf("done\nSUCCESS\n");
	}
}
