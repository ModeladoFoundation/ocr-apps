// Example 29: A compilcated send/recv test.

int i;
int rank;
int target;
gpp_t index_array;
gpp_t data_array;

int src;
int dest;
int offset;
size_t size;
gpp_t send_buf;
gpp_t recv_buf;

void f1(int *target, gpp_t index_array, gpp_t data_array, int rank, int *src, int *dest, int *offset, size_t *size, gpp_t *send_buf, gpp_t *recv_buf)
{
	int NP = pil_get_nwCount();
	*src = (rank + NP - 1) % NP;
	*dest = (rank + 1) % NP;
	*size = sizeof(int);
	*offset = 0;
	pil_alloc(send_buf, *size);
	pil_alloc(recv_buf, *size);
	int *p = (int *) send_buf->ptr;
	*p = (rank+2) % NP;
	printf("%d: sending %d to node %d\n", rank, *p, *dest); fflush(stdout);
	if (rank%2) {
		*target = 2;
	}
	else
	{
		*target = 3;
	}
}

void f4(int *target, gpp_t index_array, gpp_t data_array, int rank, gpp_t recv_buf)
{
	//pil_barrier();
	int *p = (int *) recv_buf.ptr;
	printf("%d: num = %d\n", rank, *p); fflush(stdout);
	*target = 0;
}

node(1, rank, i, [1:1:1], target, [0], [2,3], f1(&target, index_array, data_array, rank, &src, &dest, &offset, &size, &send_buf, &recv_buf))
pil_send(2, rank, [1], [4], dest, size, offset, send_buf)
pil_recv(3, rank, [1], [5], src, size, offset, recv_buf)
pil_recv(4, rank, [1], [6], src, size, offset, recv_buf)
pil_send(5, rank, [1], [6], dest, size, offset, send_buf)
node(6, rank, i, [1:1:1], target, [2,3], [0], f4(&target, index_array, data_array, rank, recv_buf))

void pil_main(int argc, char **argv, int rank)
{
	gpp_t index_array, data_array;
	int src, dest, offset;
	size_t size;
	gpp_t send_buf, recv_buf;

	pil_init(&index_array, &data_array);

	pil_enter(1, rank, 9, index_array, data_array, rank, &src, &dest, &offset, &size, &send_buf, &recv_buf);

	//pil_barrier();
	if (rank == 0) {
		int *p = (int *) recv_buf.ptr;
		if (*p == rank+1) {
			printf("SUCCESS\n");
		}
		else
		{
			printf("FAILURE\n");
		}
	}
}
