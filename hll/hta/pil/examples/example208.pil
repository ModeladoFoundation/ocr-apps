// Example: A binomial tree-based broadcast implementation

#include <math.h>

#define VAL (1.2345)
#define BCAST_SOURCE (0)
#define NUM_BCAST (1)

int pid;
int idx;
uint32_t target_id;
int np;
int src;
int dest;
int next_dest;
int offset;
int round;
int pid_norm;
int src_bcast;
size_t size;

gpp_t index_array;
gpp_t data_array;
gpp_t buf;

void _bcast_tree(uint32_t *target_id, gpp_t index_array, gpp_t data_array, int pid, int np, int *round, int pid_norm, int src_bcast, int *src, int *dest, size_t size, int offset, gpp_t buf)
{
    int src_norm, dest_norm;
    int temp = (int)pow(2, (*round));
    int temp2 = (int)pow(2, (*round)+1);

    if ( pid_norm < temp) { // Sending in this round
      *src = pid;
      dest_norm = pid_norm + temp;
      *dest = ( dest_norm + src_bcast >= np) ? ( dest_norm + src_bcast - np ) : ( dest_norm + src_bcast );
      if (dest_norm < np) { // np --> odd number
	*target_id = 1003;
      }
      else *target_id = 0;
    }
    else if ( pid_norm >= temp && pid_norm < temp2 ) { // Receiving in this round
      *dest = pid;
      src_norm = pid_norm - temp;
      *src = ( src_norm + src_bcast >= np) ? ( src_norm + src_bcast - np ) : ( src_norm + src_bcast);
      *target_id = 1004;
    }
    else {
      *target_id = 1002; // next round for this pid
    }
}

void _bcast_iter(uint32_t *target_id, gpp_t index_array, gpp_t data_array, int pid, int np, int *round, int pid_norm, int src_bcast, int *src, int *dest, size_t size, int offset, gpp_t buf)
{
    if ( *round == (int)(log(np)/log(2)) ) { // log2(np)
        *target_id = 0;
    }
    else {
	(*round)++;
	*target_id = 1001;
    }
}

void dummy_exit(uint32_t *target_id, gpp_t index_array, gpp_t data_array)
{
    *target_id = 0;
}

// broadcast
node(1001, pid, idx, [0:1:0], target_id, [0], [0, 1003, 1004, 1002], _bcast_tree(&target_id, index_array, data_array, pid, np, &round, pid_norm, src_bcast, &src, &dest, size, offset, buf))
node(1002, pid, idx, [0:1:0], target_id, [1001, 1003, 1004], [0, 1001], _bcast_iter(&target_id, index_array, data_array, pid, np, &round, pid_norm, src_bcast, &src, &dest, size, offset, buf))
pil_send(1003, pid, [1001], [1002], dest, size, offset, buf)
pil_recv(1004, pid, [1001], [1002], src, size, offset, buf)


void pil_main(int argc, char **argv, int pid)
{
    int i;
    gpp_t index_array, data_array;
    int np;
    int src, offset;
    int dest, src_bcast, pid_norm;
    int round;
    size_t size;
    gpp_t buf;
    const double val = VAL;
    double result = 0.0;

    // Broadcast a double value
    pil_init(&index_array, &data_array);
    np = pil_get_nwCount();
    src = src_bcast = BCAST_SOURCE;
    dest = 0;
    round = 0;
    pid_norm = ( pid - BCAST_SOURCE < 0 ) ? ( np + (pid - BCAST_SOURCE) ) : ( pid - BCAST_SOURCE );

    // Setup broadcast buffer
    size = sizeof(double);
    offset = 0;
    pil_alloc(&buf, size);
    if(pid == src)
        *((double*)buf.ptr) = val;
    else
        *((double*)buf.ptr) = 0.0;

    for(i=0; i<NUM_BCAST; i++) {
        pil_enter(1001, pid, 12, index_array, data_array, pid, np, &round, pid_norm, src_bcast, &src, &dest, size, offset, buf);
    }
    // At this point, the broadcast is done
    result = *((double*)buf.ptr);

    // Verification
    if (result == VAL) {
        printf("%d: SUCCESS\n", pid);
    } else {
        printf("%d: FAILURE (%.4lf)\n", pid, result);
    }
}
