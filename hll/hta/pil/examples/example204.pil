// Example 27: A basic send/recv test.

#define NUM (42)

int i;
int rank;
int target;
gpp_t index_array;
gpp_t data_array;

int dest;
int src;
size_t size;
int offset;
gpp_t send_buf;
gpp_t recv_buf;

void f(int *target, gpp_t index_array, gpp_t data_array, int rank, int *dest, int *src, size_t *size, int *offset, gpp_t *recv_buf, gpp_t *send_buf)
{
	*dest = 1;
	*src = 0;
	*size = sizeof(int);
	*offset = 0;
	if (rank == 0)
	{
		pil_alloc(send_buf, *size);
		int *p = (int *) send_buf->ptr;
		*p = NUM;
		printf("%d: sending %d to node %d\n", rank, *p, *dest); fflush(stdout);
		*target = 2;
	}
	else if (rank == 1)
	{
		pil_alloc(recv_buf, *size);
		*target = 3;
	}
	else
	{
		printf("%d: this rank does nothing. exiting.\n", rank);
		*target = 0;
	}
}

void recv(int *target, gpp_t index_array, gpp_t data_array, int rank, gpp_t recv_buf)
{
	if (rank == 1) {
		int *p = (int *) recv_buf.ptr;
		fprintf(stdout, "%d: num = %d\n", rank, *p); fflush(stdout);
	}
	*target = 0;
}

node(1, rank, i, [1:1:1], target, [0], [2,3,0], f(&target, index_array, data_array, rank, &dest, &src, &size, &offset, &recv_buf, &send_buf))
pil_send(2, rank, [1], [4], dest, size, offset, send_buf)
pil_recv(3, rank, [1], [4], src, size, offset, recv_buf)
node(4, rank, i, [1:1:1], target, [2,3], [0], recv(&target, index_array, data_array, rank, recv_buf))

void pil_main(int argc, char **argv, int rank)
{
	gpp_t index_array, data_array;
	int src, dest, offset;
	size_t size;
	gpp_t recv_buf, send_buf;

	pil_init(&index_array, &data_array);
	if (rank == 0) printf("Total number of PEs = %d\n", pil_get_nwCount());
	pil_enter(1, rank, 9, index_array, data_array, rank, &dest, &src, &size, &offset, &recv_buf, &send_buf);
	if (rank == 1) {
		int *p = (int *) recv_buf.ptr;
		if (*p == NUM) {
			printf("SUCCESS\n");
		}
		else
		{
			printf("%d\nFAILURE\n", *p);
		}
	}
}
