Steps:
    - Compile OCR and set OCR_INSTALL to point to the installation of OCR
    - Set and export HTAHLL to this directory
    - Set and export LD_LIBRARY_PATH to $OCR_INSTALL/lib and $HTAHLL/hta/lib
    - Set and export OCR_CONFIG to the configuration you want to use for OCR
      (usually ${OCR_INSTALL}/config/default.cfg)

    * Some HTA unit tests may require more data block slots of EDTs to work.
      Please edit ${OCR_INSTALL}../build/x86-pthread-x86/Makefile, change the CFLAGS setting
      to the following and rebuild if getting runtime assertions:
          CFLAGS  := -DOCR_MAX_MULTI_SLOT=16 -DINIT_DEQUE_CAPACITY=32768

To test PIL:
    - Go to ${HTAHLL}/pil and run './run ocr 001' (or any of the micro tests)
    - OMP and Reservoir backends are also available

To test HTA:
    - Go to ${HTAHLL}/hta/src and type 'make'
    - Go to ${HTAHLL}/hta/test and type 'make -j32'
    - To run all the microbenchmarks run 'python auto_test.py'. This
      will generate an auto_test_results.txt with the results of all the tests

For the NAS parallel benchmarks:
    - Go to ${HTAHLL}/test/benchmarks/SNU_NPB-1.0.3/NPB3.3-HTA
    - GCC is used. ICC is also possible:
        - in config/make.def replace 'gcc' with 'icc' and '-fopenmp' with '-openmp'
    - To make a benchmark type, for example: 'make EP CLASS=A'. This will build the OMP
      and OCR version
    - Notes:
        - Some benchmarks may require larger heap for OCR (change in the ocr configuration file)

For more information about Hierarchically Tiled Arrays, please visit
    http://polaris.cs.uiuc.edu/hta/

If there are questions concerning getting HTA programs to run, please contact:
    Chih-Chieh Yang    cyang49 at illinois.edu

If there are questions concerning the general concepts of HTA programming, please contact:
    Chih-Chieh Yang    cyang49 at illinois.edu
    David Padua        padua at illinois.edu

