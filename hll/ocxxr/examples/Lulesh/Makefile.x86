# CnC-OCR Makefile for lulesh
TARGET := lulesh

#################################################
# DEBUG / OPTIMIZATION OPTIONS

# Optimization flags
CFLAGS += -O3

# Enable CnC assertions and runtime sanity checks
#CFLAGS += -g -DCNC_DEBUG

# Enable debug logging for x86 (also serializes step execution)
#CFLAGS += -DCNC_DEBUG_LOG=\"./cnc_events.log\"

# Enable debug tracing (all targets)
#CFLAGS += -DCNC_DEBUG_TRACE=1

# Enable AddressSanitizer checks
#CC_OPTS += -g -fsanitize=address -fno-omit-frame-pointer


#################################################
# ENVIRONMENT SETUP

OCR_TYPE         ?= x86
CNC_TYPE         ?= $(OCR_TYPE)
WORKLOAD_SRC     ?= .
WORKLOAD_BUILD   ?= ./build/$(CNC_TYPE)
WORKLOAD_INSTALL ?= ./install/$(CNC_TYPE)
WORKLOAD_EXEC    ?= $(WORKLOAD_INSTALL)
CNC_SUPPORT_DIR  ?= $(WORKLOAD_SRC)/cnc_support/$(CNC_TYPE)

# Make sure we can find OCR and CnC-OCR
ifndef XSTG_ROOT
  ifndef OCR_INSTALL_ROOT
    $(error Please define XSTG_ROOT or OCR_INSTALL_ROOT)
  endif #CNC_INSTALL_ROOT
  ifndef UCNC_ROOT
    $(error Please define XSTG_ROOT or UCNC_ROOT)
  endif #UCNC_ROOT
  ifndef APPS_ROOT
    $(error Please define XSTG_ROOT or APPS_ROOT)
  endif #APPS_ROOT
else  #XSTG_ROOT
  OCR_INSTALL_ROOT ?= $(XSTG_ROOT)/ocr/ocr/install
  UCNC_ROOT        ?= $(XSTG_ROOT)/apps/hll/cnc
  APPS_ROOT        ?= $(XSTG_ROOT)/apps/apps
endif #XSTG_ROOT

OCR_ROOT   ?= $(shell dirname "$(OCR_INSTALL_ROOT)")
OCR_AR     ?= $(OCR_INSTALL_ROOT)/lib/libocr_$(OCR_TYPE).a


#################################################
# RUN CONFIGURATION

ifndef OCR_CONFIG
OCR_CONFIG           := generated.cfg
CONFIG_NUM_THREADS   ?= 4
OCR_GENERATED_CONFIG := $(WORKLOAD_INSTALL)/$(OCR_CONFIG)
endif #OCR_CONFIG

WORKLOAD_ARGS ?=
WORKLOAD_INPUT_FILE_IDX ?= 0


#################################################
# INCLUDES

# Auto-parse arguments for "make run" (WORKLOAD_ARGS)
-include $(APPS_ROOT)/makefiles/make-pre.inc

include $(CNC_SUPPORT_DIR)/lulesh_defs.mk


#################################################
# COMPILER FLAGS SETUP

CC_OPTS += -pthread
LDFLAGS += -lm $(CC_OPTS)
IFLAGS  += -I. -I$(CNC_SUPPORT_DIR) -I$(OCR_INSTALL_ROOT)/include

HEADERS := lulesh_defs.h $(wildcard $(CNC_SUPPORT_DIR)/*.h)
SRCS := Main.cpp lulesh.cpp $(CNC_STEP_SRCS)
SRCS += $(patsubst %,$(CNC_SUPPORT_DIR)/%.c,cnc_common cncocr_itemcoll)
SRCS += $(patsubst %,$(CNC_SUPPORT_DIR)/lulesh_%_ops.c,step item graph)
SRCS += $(CNC_SUPPORT_DIR)/cncocr.cpp

# Optionally allow the user to provide some overrides in a separate makefile
# (allowing you to keep using the auto-generated makefile for most settings)
-include lulesh_overrides.mk

CFLAGS += $(IFLAGS) $(OPT_FLAGS) -Wall $(CC_OPTS)
CFLAGS += -DOCR_TYPE_H="$(OCR_TYPE).h"


#################################################
# START OCXXR STUFF

# We want to use ocxxr::Main as entry point
CFLAGS += -DNO_CNC_MAIN=1

# Need OCXXR include files
CXXFLAGS += -I$(OCXXR_LIB_ROOT)/include

# OTHER COMPILER CONFIG
CHECK_CXX_OPT_SUPPORT := echo | $(CXX) -fsyntax-only -xc++ -

# Try C++14, otherwise fall back to C++11
ifeq ($(shell $(CHECK_CXX_OPT_SUPPORT) -std=c++14 2>&1),)
CXXFLAGS += -std=c++14
else
$(info No C++14 support. Falling back to C++11.)
CXXFLAGS += -std=c++11
endif

ERROR_LIMIT := 4

# Try C++14, otherwise fall back to C++11
ifeq ($(shell $(CHECK_CXX_OPT_SUPPORT) -ferror-limit=1 2>&1),)
CXXFLAGS += -ferror-limit=$(ERROR_LIMIT) # clang
else
CXXFLAGS += -fmax-errors=$(ERROR_LIMIT) # gcc
# GCC needs this, otherwise integer format macros are missing
CXXFLAGS += -D__STDC_FORMAT_MACROS
endif


# END OCXXR STUFF
#################################################



OBJS_TMP := $(SRCS:%.c=$(WORKLOAD_BUILD)/%.o)
OBJS += $(OBJS_TMP:%.cpp=$(WORKLOAD_BUILD)/%.o)


#################################################
# MAKE TARGETS

.PHONY: all pre_build build install clean run gdb

all: build install

pre_build: $(OCR_AR)


build: pre_build $(WORKLOAD_BUILD)/$(TARGET) $(OCR_GENERATED_CONFIG)

ifeq ($(RUN_JENKINS), runApp)
# Ignore build/install if Jenkins is running the app
install:
else
# Normal installation
install: build $(WORKLOAD_INSTALL)/$(TARGET) $(WORKLOAD_INSTALL)/Makefile.$(CNC_TYPE)
endif

ensure_dir = @mkdir -p $(@D)

# install support files
$(WORKLOAD_INSTALL)/%: $(WORKLOAD_SRC)/%
	$(ensure_dir)
	cp $< $@

# install the binary
$(WORKLOAD_INSTALL)/$(TARGET): $(WORKLOAD_BUILD)/$(TARGET)
	$(ensure_dir)
	cp $< $@

# build C source files
$(WORKLOAD_BUILD)/%.o: %.c $(HEADERS) | $(OCR_AR)
	$(ensure_dir)
	$(CC) $(CFLAGS) -c $< -o $@

# build C++ source files
$(WORKLOAD_BUILD)/%.o: %.cpp $(HEADERS) | $(OCR_AR)
	$(ensure_dir)
	$(CXX) $(CFLAGS) $(CXXFLAGS) -c $< -o $@

# build the ocr runtime (if needed)
$(OCR_AR):
	@echo OCR_ROOT=$(OCR_ROOT)
	@[ -f "$(OCR_ROOT)/ocr.dox" ] \
		|| (echo "ERROR: Can't build OCR runtime (can't find OCR build directory)" && exit 1)
	OCR_TYPE=$(OCR_TYPE) make -C $(OCR_ROOT) install

ifdef OCR_GENERATED_CONFIG
$(OCR_GENERATED_CONFIG):
	$(ensure_dir)
	$(OCR_INSTALL_ROOT)/share/ocr/scripts/Configs/config-generator.py --guid LABELED  --threads $(CONFIG_NUM_THREADS) --remove-destination $(CONFIG_FLAGS) --output $@
endif #OCR_GENERATED_CONFIG

# link the binary
$(WORKLOAD_BUILD)/$(TARGET): $(OBJS) $(OCR_AR)
	$(ensure_dir)
	$(CXX) -o $@ $^ $(LDFLAGS)

# delete build and install directories
clean:
	rm -rf $(WORKLOAD_BUILD) $(WORKLOAD_INSTALL)

# run the binary
run: install
	cd $(WORKLOAD_EXEC) && \
	OCR_CONFIG=$(OCR_CONFIG) \
	$(RUN_TOOL) ./$(TARGET) $(WORKLOAD_ARGS)

# run the binary with gdb
gdb: RUN_TOOL := gdb -ex r --args
gdb: run
