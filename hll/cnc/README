CnC-OCR version 1.0.0
Last updated on 2015-05-21

============================================================================
*
* Installation Prerequisites
*
    - make
    - gcc
    - curl
    - Python (2.6 or 2.7)
    - OCR (1.0)

*
* Setting up the environment for OCR
*
If you have a copy of the xstack repository, the CnC-OCR root directory (which
contains this README) should be in the xstack/hll directory. The expected
directory structure is as follows:

   - xstack/ : the root xstack source directory
   - xstack/ocr/ : the source root for OCR
   - xstack/hll/ : high-level-libraries for OCR
   - xstack/hll/cnc/ : CnC-OCR root directory

If you don't have a copy of the xstack repository, you can still mimic this
directory structure to get the expected behavior. To set the needed environment
variables, navigate to the CnC-OCR root directory and source setup_env.sh:

    source setup_env.sh

This script sets the XSTACK_ROOT variable to point to the xstack repository root,
CNCOCR_ROOT to point to the CnC-OCR root, and updates the PATH to include
the CnC-OCR bin directory (which contains the graph translator tool).

*
* Running the translator
*
    cncocr_t [options] GraphName.cnc

The first time you run the graph translator, it will download and install
several Python dependencies, which will be saved in ${CNCOCR_ROOT}/py for
future use.

*
* Documentation
*
Please visit the CnC-OCR wiki on Github for the current documentation.
    https://github.com/habanero-rice/cnc-ocr/wiki

============================================================================
*
* Creating CnC-OCR applications
*

1) For any CnC-OCR application, the first step is to create the CnC graph file
   (name.cnc) which will define the steps and item collections, as well as the
   relations among them.

2) The second step is invoking the translator:

       cncocr_t GraphName.cnc

   This will generate a bunch of files. The files generated in the current
   directory should be edited by the application author. The files in the
   cncocr_support directory interface the user code with the underlying OCR
   runtime and should not need any editing.

3) The third step is editing the code in the project directory to implement the
   graph's init, finalize, and step functions. Additionally, you may need to
   edit cncMain (in Main.c) to parse command-line arguments and pass them to the
   CnC graph when launched.

4) make run WORKLOAD_ARGS="arg1 arg2 arg3 ..."

See the examples (in the $CNCOCR_ROOT/examples directory) for sample code. For
more details on the CnC-OCR toolchain, API, workflow, etc., please refer to the
online documentation (link included above).


*
* Help
*
You can submit bug reports and other issues on our Github page:
    https://github.com/habanero-rice/cnc-ocr


*
* Acknowledgments
*
Partial support for CnC-OCR was provided through the CDSC program of
the National Science Foundation with an award in the 2009 Expedition
in Computing Program.
This work is actively supported as part ofthe DoE-funded Traleika Glacier
X-Stack project (Intel CS1924113).
