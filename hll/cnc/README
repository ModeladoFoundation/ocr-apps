*
* Installation Prerequisites
*
	- ant
	- make
	- java
	- gcc
	- libxml2
	- OCR (0.8)

*
* On the XSTG cluster
*

Everything is already set up.

*
* Building the CnC-OCR distribution
*

The following creates a distribution in folder 'cncocr_distrib':

	make dist

To build, you need to have OCR_INSTALL properly set-up (see
'Setting up the environment')

The resulting distribution has the followign layout:
	- bin/
		Contains the cncocr translator
	- includes/
		Contains include files of the cncocr runtime
	- lib/
		Contains the object file generated from cncocr runtime sources

*
* Setting up the environment
*
   - Ensure OCR env is set:
	export OCR_INSTALL=`your_ocr_checkout`/ocr-install
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${OCR_INSTALL}/lib
   - Set up CnC env:
	export CNCOCR_INSTALL=`pwd`/cncocr_distrib
	export PATH=$PATH:${CNCOCR_INSTALL}/bin
     You can source set_cncocr_home from the current directory to achieve this, too.

*
* Running the translator
*
	cncocr_t [options] FileName.cnc


*
* Docs
*
	Some additional documentation on the CnC model can be found in
	docCnCHC.pdf, a document created part of the CDSC project.  In
	spite of the fact that the document was designed for CnC-HC
	rather than CnC-OCR, it is never the less informative about
	creating a .cnc file and changing it, concepts that still
	apply for CnC-OCR.

============================================================================

*
* Creating a CnC-OCR application
*

1) For any CnC-OCR application, the first step is to create the CnC
graph file (name.cnc) which will define the steps, item collections
and tag collections and the relations between them.

2) The second step is invoking the translator:
cncocr_t name.cnc

   This will generate a series of files:
     - Common.* Context.* Dispatch.* => These files create the link
       between the user code and the CnC runtime. They are normally
       not modified, and are overwriten on subsequent calls of the
       translator. If tag functions are not present in the graph file,
       then the Common.* files need to be edited to call the
       appropriate Get functions. For using user-defined types or
       global constants, the user may add the proper includes in
       Context.h.
     - 'StepName'.hc => A step stub will be generated for every step
       defined in the graph. These need to be edited by the user with
       the afferent computation. The step files will not be
       overwritten on subsequent calls of the translator. The role of
       the stubs is to provide suggested code for Put and prescribe
       calls based on the information retrieved from the .cnc
       file. These calls are optional, meaning that, for a particular
       step instance, the user may choose not to Put (write) all data
       declared in the graph file or not to prescribe (spawn) all
       steps specified. The full-auto option makes Puts and prescibes
       compulsory thus avoiding the need for edits, but restricting
       the application space.
     - Main.hc => Contains the main() for the program and had
       generated code on how a graph should be created and places
       initialized. It is not overwritten on further translator calls.
     - Makefile => Contains a reference Makefile for building the
       application using the generated files. It is not overwritten on
       further translator calls.

Note: Current default runtime is _Data_Driven. (Alternative is
Rollback_and_Replay. This is currently set in DataDriven.h)

3) The third step is adding the computation steps to each step stub
and editing the Main to start the execution of the CnC graph.

4) make; ./name.exec args
Note: in CnC-OCR, you need to specify the OCR configuration file
either through the OCR_CONFIG environment variable or the
argument '-ocr:cfg <path-to-configuration-file>'. A default
configuration file is located in ${OCR_INSTALL}/configs/default.cfg.

Note: in CnC-OCR (as opposed to CnC-HC) the code generation in Main is
not yet polished. Please refer to ${CNCOCR_INSTALL}/src/examples for
guidelines.

*
* Examples
*

1)simpleTest
cd simpleTest
cncocr_t simpleTest.cnc
make
./simpleTest.exec -ocr:cfg ${OCR_INSTALL}/config/default.cfg

2)choleskyFactorization
cd choleskyFactorization
cncocr_t Cholesky.cnc
make
./run_test.sh

*
* Additional arguments
*

Additional CnC arguments (run cncocr_t):
Usage: cncocr_t [options] <cnc_input> ...
where [options] includes:
	-h -help --help		print this message
	-d			dump parsed tokens
	-k			dump keywords
	-p			print the AST
	-dir			directory for placing generated files
	-full-auto		fully automate Main.hc and step stubs for CDSC applications
				(This option limits the applications that can be expressed
				 but the generated step stubs and Main.hc need not be edited.
				 The user only write the code doing computation in his own *.c files)

Additional HC arguments (run executable --help):
HC options:
    --nproc <n> : the number of processors, env: HC_NPROC
    --hpt <hpt-spec.xml> : the HPT specification XML file, env: HC_HPT
    --hpt2dot : Output hpt to dot file for visualization, env: HC_HPT2DOT
    --deqsize <n> : the deque size (default 1024), env: HC_DEQSIZE
    --pthread-stacksize <n> : set the stack size of the worker pthreads, env: HC_PTHREAD_STACKSIZE
    --hf : set the scheduling policy to HELP_FIRST, env:
    --wf : set the scheduling policy to WORK_FIRST, env:
    --sched_policy <WORK_FIRST|HELP_FIRST> : set the scheduling policy, default: WORK_FIRST, env: HC_SCHED_POLICY
    --bind <bind-file> : thread binding map of worker to cpu, env: HC_BIND_THREAD
    --version : print version of the Habanero C runtime system, env:
    --help : print this message, env:

*
* Help
*
For any questions, problems or bug reports email as44@rice.edu.


*
* Acknowledgements
*

Partial support for CnC-OCR was provided through the CDSC program of
the National Science Foundation with an award in the 2009 Expedition
in Computing Program.
