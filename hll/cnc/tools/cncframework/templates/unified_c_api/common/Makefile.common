# {% block cnc_name_comment %}Generic CnC{% endblock %} Makefile for {{g.name}}
TARGET := {{g.name}}

#################################################
# DEBUG / OPTIMIZATION OPTIONS

# Optimization flags
CFLAGS += -O2

# Enable CnC assertions and runtime sanity checks
CFLAGS += -g -DCNC_DEBUG

# Enable debug logging for x86 (also serializes step execution)
#CFLAGS += -DCNC_DEBUG_LOG=\"./cnc_events.log\"

# Enable debug tracing (all targets)
#CFLAGS += -DCNC_DEBUG_TRACE=1

# Enable AddressSanitizer checks
#CC_OPTS += -g -fsanitize=address -fno-omit-frame-pointer


#################################################
# ENVIRONMENT SETUP
{% block env_setup_pre %}{% endblock env_setup_pre %}
CNC_TYPE         ?= {% block cnc_type %}generic-cnc{% endblock %}
WORKLOAD_SRC     ?= .
WORKLOAD_BUILD   ?= ./build/$(CNC_TYPE)
WORKLOAD_INSTALL ?= ./install/$(CNC_TYPE)
WORKLOAD_EXEC    ?= $(WORKLOAD_INSTALL)
CNC_SUPPORT_DIR  ?= $(WORKLOAD_SRC)/cnc_support/{% block support_dir_name %}$(CNC_TYPE){% endblock %}
{% block env_setup_post %}{% endblock %}

#################################################
# INCLUDES

# Auto-parse arguments for "make run" (WORKLOAD_ARGS)
-include $(APPS_ROOT)/makefiles/make-pre.inc

include $(CNC_SUPPORT_DIR)/{{g.name}}_defs.mk


#################################################
# COMPILER FLAGS SETUP
{% block platform_flags %}{% endblock %}
CC_OPTS += -pthread
LDFLAGS += -lm $(CC_OPTS) {% block xtra_libs %}{% endblock %}
IFLAGS  += -I. -I$(CNC_SUPPORT_DIR) {% block xtra_incs %}{% endblock %}

HEADERS := {{g.name}}_defs.h $(wildcard $(CNC_SUPPORT_DIR)/*.h)
SRCS := Main.c {{g.name}}.c $(CNC_STEP_SRCS)
{% block xtra_srcs %}{% endblock %}
# Optionally allow the user to provide some overrides in a separate makefile
# (allowing you to keep using the auto-generated makefile for most settings)
-include {{g.name}}_overrides.mk

CFLAGS += $(IFLAGS) $(OPT_FLAGS) -Wall $(CC_OPTS)
OBJS += $(SRCS:%.c=$(WORKLOAD_BUILD)/%.o)
{% block xtra_objs %}{% endblock %}

#################################################
# MAKE TARGETS

.PHONY: all pre_build build install clean run gdb

all: build install

pre_build: {% block target_xtra_deps %}{% endblock %}


build: pre_build $(WORKLOAD_BUILD)/$(TARGET) {% block build_aux %}{% endblock %}

ifeq ($(RUN_JENKINS), runApp)
# Ignore build/install if Jenkins is running the app
install:
else
# Normal installation
install: build $(WORKLOAD_INSTALL)/$(TARGET) $(WORKLOAD_INSTALL)/Makefile.$(CNC_TYPE) {% block xtra_install_files %}{% endblock %}
endif

ensure_dir = @mkdir -p $(@D)

# install support files
$(WORKLOAD_INSTALL)/%: $(WORKLOAD_SRC)/%
	$(ensure_dir)
	cp $< $@

# install the binary
$(WORKLOAD_INSTALL)/$(TARGET): $(WORKLOAD_BUILD)/$(TARGET)
	$(ensure_dir)
	cp $< $@

# build C source files
$(WORKLOAD_BUILD)/%.o: %.c $(HEADERS) {% block xtra_o_deps %}{% endblock %}
	$(ensure_dir)
	$(CC) $(CFLAGS) -c $< -o $@
{% block xtra_targets %}{% endblock %}
# link the binary
$(WORKLOAD_BUILD)/$(TARGET): $(OBJS) {{ self.target_xtra_deps() }}
	$(ensure_dir)
	{% block linker %}$(CC){% endblock %} -o $@ $^ $(LDFLAGS)

# delete build and install directories
clean:
	rm -rf $(WORKLOAD_BUILD) $(WORKLOAD_INSTALL)

# run the binary
{% block run_target -%}
run: install
	cd $(WORKLOAD_EXEC) && \
	$(RUN_TOOL) ./$(TARGET) $(WORKLOAD_ARGS)
{% endblock run_target -%}

{% block gdb_target %}
# run the binary with gdb
gdb: RUN_TOOL := gdb -ex r --args
gdb: run
{%- endblock gdb_target %}
