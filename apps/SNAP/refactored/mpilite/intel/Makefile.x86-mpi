# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.

COMM_LAYER=mpi

ifndef APPS_ROOT
$(warning APPS_ROOT not set. Using default path. APPS_ROOT can also be set by sourcing app_env.bash from "apps/"!)
APPS_ROOT ?= ../../../..
endif
REPO_TOP ?= ${APPS_ROOT}/..

# APPS
APPS_ROOT       ?= ${REPO_TOP}/apps
APPS_LIBS_ROOT  ?= ${REPO_TOP}/apps/libs/x86
#MPILITE  = $(APPS_ROOT)/libs/src/mpilite


# OCR_TYPE
OCR_TYPE        ?= x86-${COMM_LAYER}

# OCR
OCR_ROOT         ?= ${REPO_TOP}/../ocr/ocr
OCR_INSTALL ?= ${OCR_ROOT}/install
OCR_BUILD_ROOT   ?= ${OCR_ROOT}/build
OCR_SRC          ?= ${OCR_ROOT}



# APPLICATION
WORKLOAD_SRC          ?= .
WORKLOAD_BUILD_ROOT   ?= ./build
WORKLOAD_INSTALL_ROOT ?= ./install

# If 0, the workload has no input file
# If 1+, this is the index in the argument
# list after which everything is considered an
# input file. Note that the index STARTS AT 1
WORKLOAD_INPUT_FILE_IDX := 0

# You can specify default arguments here. These
# will be overriden by (in order):
#   - the WORKLOAD_ARGS environment variable
#   - the arguments passed to 'make run'
# To restate, the arguments passed to make run have
# the highest priority and will override both the
# default arguments here and the ones passed through
# an environment variable
#CONFIG_NUM_THREADS ?= 4
#WORKLOAD_ARGS ?= -r ${CONFIG_NUM_THREADS} -t 1600 --fi ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fin04 --fo ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fout04
#WORKLOAD_ARGS ?= -r 4 -t 1600 --fi ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fin01 --fo ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fout01
WORKLOAD_ARGS ?= -r 4 -t 1600 --fi ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fin04 --fo ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fout04
#WORKLOAD_ARGS ?= -r 4 -t 1600 --fi ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fin12 --fo ${APPS_ROOT}/SNAP/refactored/mpilite/intel/fout12

# Run mode (not fully supported)
# Set to "yes" if running with torque
RUN_TORQUE ?= no
# Set to "yes" if Jenkins is running this job as an automated test
RUN_JENKINS ?= no
# Set to yes if running visualizer or export as environment variable
ENABLE_VISUALIZER ?= no
## END of variables coming from user/environment

include ${APPS_ROOT}/makefiles/make-pre.inc

# Name of the application to build
TARGET ?= snap_lite
#    $(CLINKER) -o $(TARGET) $(LIBPATHS)  $(CFLAGS) $(OBJS) $(EXTOBJS) $(LIBS)

# Space separated list of directory names in apps/libs/src
# that need to be built. These will be built for ARCH
REQ_LIBS := mpilite

# MPILite config file needs LABELED
CONFIG_FLAGS := --guid LABELED

# Space separated list of source files

# Use the ROSE translated sources
SRC_NAMES = snap_main.c utils.c version.c plib.c geom.c \
       sn.c data.c control.c input.c setup.c dealloc.c \
       translv.c solvar.c outer.c expxs.c inner.c sweep.c \
       octsweep.c dim1_sweep.c dim3_sweep.c output.c time.c mms.c

SRCS := $(addprefix rose_,$(SRC_NAMES))

OBJS: $(ROSE_TARGET)


#OBJS := $(notdir $(SRCS:.c=.o))
CFLAGS=-O0 -g -std=c99 -DMPILITE -D__MACH__ -I./ -I${APPS_ROOT}/libs/x86/include
#CFLAGS=-O0 -g -std=c99 -DMPILITE -DDEBUG=2 -I./ -I${APPS_ROOT}/libs/x86/include
#CFLAGS :=  -DOCR_RUNTIME_PROFILER
LDFLAGS := -fopenmp -lpthread -lm -lmpilite

# Targets:
#   - all:     Build the application.
#   - debug:   Build the debug version of the application
#   - install: Build and install
#   - run:     Run the application
#all:	CFLAGS += -O3 -fno-inline
all:	CFLAGS += -O0 -DMPILITE
all:	TARGETS := all
all:	default

debug:	CFLAGS += -O0
debug:	TARGETS := debug
debug:	default

install: all

.DEFAULT_GOAL := install

# This rule will be executed prior to execution:
#  - For the FSim target, this happens when the binary is built
#  - For all other targets this happens prior to running the
#    executable
# WORKLOAD_ARGS and WORKLOAD_INPUTS are available
# to you and contain, respectively, the non file
# arguments and the file arguments. They will be
# passed directly to the application unless you
# modify them. You can use the following
# syntax to do so:
# $(eval WORKLOAD_INPUTS := something) or
# $(eval WORKLOAD_INPUTS := $(shell <script>))
# The second syntax will execute <script> and assign
# its output to WORKLOAD_INPUTS
#
# You may also want to assign a value to WORKLOAD_OUTS
# which should contain the list of output files produced
# by the application (to be passed to postrun). This is
# taken-care of for you on FSim but not on any of the
# other platforms.
# 'prerun: ;' is an empty rule (the rule is required)
.PHONY: prerun
prerun: ;

# ROSE support occurs here.

include ${APPS_ROOT}/makefiles/make-rose.inc

TARGET ?= snap_lite
ROSE_TARGET = rose_$(TARGET)

SRCDIR = $(APPS_ROOT)/SNAP/refactored/mpilite/intel
BLDDIR = $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)

SRC := $(addprefix $(SRCDIR)/,$(SRC_NAMES))

prebuild: libocr $(ROSE_TARGET)

$(ROSE_TARGET): $(ROSE_TOOL) create_dir
	cd $(BLDDIR) ; \
	$(ROSE_TOOL) $(ROSE_OPT) $(CFLAGS) $(CC_INC) $(SRC) $(LD_FLAGS) $(MPI_FLAGS) >& $(HERE)/build.log ; \
	$(CP) $(SRCDIR)/snap.h $(BLDDIR) ; \
	cd $(HERE)


$(ROSE_TOOL):
	cd $(ROSE_TOOL_ROOT)/src ; \
	make ; \
	cd $(HERE)


create_dir:
	mkdir -p $(BLDDIR)


rose: $(ROSE_TOOL) create_dir $(ROSE_TARGET)

# This rule will be executed after execution
# The variable ${WORKLOAD_OUTS} contains a space separated
# list of output files
# 'postrun: ;' is an empty rule (the rule is required
# to be present though)
.PHONY: postrun
postrun: ;

# Include common part
include ${APPS_ROOT}/makefiles/make-ocrrun.inc
