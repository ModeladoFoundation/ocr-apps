This directory provides an implementation of reductions (and broadcast) using labeled GUIDs.

Labeled GUIDs are currently experimental so it is necessary to include

#define ENABLE_EXTENSION_LABELING
#include "extensions/ocr-labeling.h"

it is also necessary to change the GUID factory to "LABELED"
this is accomplished by adding the line

CONFIG_FLAGS=--guid LABELED

in Makefile.x86 and Makefile.x86-mpi

driver.c : a sample driver which exercises double precision addition (in apps/reduction/refactored/ocr/intel


However before calling reductionLaunch the user must
  1. create a reductionPrivate datablock for each participating rank
  2. initialize some of the values in the reductionPrivate datablock
      nrank: number of participating ranks
      myrank: my number
      ndata: number of elements to be reduced
         for BROADCAST, ndata is in BYTES since there is no "reductionOperator" to give a size
      type: an enum type {ALLREDUCE, REDUCE, BROADCAST}
      new: set to TRUE for the first call
      reductionOperator: choose which reduction to do (not needed for BROADCAST, choices in reduction.h)
      rangeGUID: a set of at least nrank-1 labeled STICKY event GUIDs
      returnEVT: an event to return the "answer"
         ALLREDUCE: everyone gets the (same) answer back
         REDUCE: only returned to rank 0's event, everyone else's event is ignored
         BROADCAST: returned to everyone's event except rank 0 (whose event is ignored)
      Can be reused if made a channel event.
   3. make the clone depend on the returnEVT

It is good hygiene to destroy the datablock that is returned with the answer (will be different on each rank)

After the first call to reductionLaunch, subsequent reductions only require a valid return event (and the source data)


Now the reduction library can be called by the nrank compute EDTs using one call:


Compute the local contribution to be reduced in a datablock

void reductionLaunch(reductionPrivate_t * rpPTR, ocrGuid_t reductionPrivateGUID, void *mydataPTR);

rpPTR is the pointer to my reductionPrivate datablock
reductionPrivateGUID is the guid of my reductionPrivate block
mydataPTR is a pointer to the data to be reduced (will be copied to a separate datablock)

reductionLaunch returns after launching the reduction algorithm.

If the reduction is returning an answer, the calling Edt should terminate soon after
and wait for the clone to wake up otherwise the calling Edt can just continue




The library implements a reduction tree invoking the reduction operator at each stage.  For ALLREDUCE this amounts to a global barrier since every rank must
contribute to the global reduction before the answer comes back

Reductions can be run as often as desired.

If multiple reductions need to be in flight at the same time, they will require separate reductionPrivate datablocks

If different reductions are needed at different times, it is only necessary to change the reductionOperator and/or the type in the reductionPrivate block


The available operations are defined in the enum type reductionOperator_t in reduction.h


To add other operations requires three changes:

add the new key word to the enum type reductionOperator_t (in reduction.h);

add the new key word in reductionsizeof (in reduction.c)

add the actual operation to reductionOperation (in reduction.c)

recompile


