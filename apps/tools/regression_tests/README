=======================================================
"Other" Regression Test Suit
=======================================================

-----------------
Running the tests
-----------------

Before running a test, you must build all of the required files first. See the section
`Building for the Tests' below.

This test suite consists of several sets of tests which test fsim, fsim-rtlsim, and fsim-swtest.
The files which can be run are:

    * run-fsim-tests.sh
    * run-fsim-rtlsim-tests.sh
    * run-fsim-swtest-tests.sh

Each test will run all of its subtests by default, but you may specify which test(s) to run by passing
them in as command line parameters. To see the tests available, run one of these test scripts with just
the '-h' argument.

If you want to see all of the output of fsim/gdb as it is being tested by the scripts, set the environmental
variable VERBOSE to a non-empty string.

You may also set the environmental variable TG_INSTALL to point to the location of tg/tg/install.
Note: this program assumes that the apps repository is located in the same directory as the tg repository.

----------------------
Building for the Tests
----------------------

The tests require a completely built tg tree (along with fsim-swtest, fsim-rtlsim, and the rtl-asm, PIE,
and swtest tests) and requires that apps/libs, apps/legacy, and apps/examples all be built for ARCH=tg-xe.

The Makefile in this directory will automatically build all of these. Simply run the command `make'.

NOTE: The cholesky and smith-waterman examples currently have faulty Makefiles. They will not
install if you specify the install target like printf and fib. Instead you need to run them as
explained in their README files. This will build, install, and run them. After you have done
this once, the regression tests for them will be able to run:

cd apps/apps/examples/cholesky
make -f Makefile.tg run WORKLOAD_ARGS="--ds 100 --ts 10 --ps 1 --fi ${PWD}/../../../apps/cholesky/datasets/m_100.in"
cd ../smith-waterman
make -f Makefile.tg run 10 10 \
${PWD}/../../../apps/smithwaterman/datasets/string1-medium.txt \
${PWD}/../../../apps/smithwaterman/datasets/string2-medium.txt \
${PWD}/../../../apps/smithwaterman/datasets/score-medium.txt

The cholesky and smith-waterman tests will not be run automatically. If you have built them and want to
run their tests, you may do so with the command:

$ ./run-fsim-tests.sh OCRcholesky OCRsmith-waterman

------------------
Creating new tests
------------------

--- fsim

To create a new fsim test, modify the appropriate run-fsim*-tests.sh file. In this file you will need
to modify three things:

1) Add the test name to the list of tests in the TESTS variable.
2) In the first switch statement, export the environmental variables WORKLOAD_INSTALL and FSIM_ARGS.
   Also export any other environmental variables that are needed, and perform the rest of setup.
   You may also optionally add tests to the REGEX array.
3) In the final switch statement, unset any extra environmental variables you exported, and perform
   any necessary cleanup and extra tests. If any test fails. Print the error message and set SUCCESS to 0;

The REGEX array is a list of regular expressions to test for (using grep) in the output of fsim. Each
regex must be matched to the output for the test to pass. The regex's must be matched in order and output
line can only be matched to one regex.

If you need to inspect the output of fsim beyond what a regex can tell you, you may find it in the
directory $LOGS_DIR under the name fsim_output.


--- xe-gdb

To create a new gdb test, you may either modify one of the existing test routines (gdb_tests/*.gdbtest) or
you may create a new one. To create a new gdb test routine, create a gdb_tests/<test_name>.gdbtest file and
add its name (without the extension) to the TESTS variable in run-gdb-tests.sh

The gdbtest files define the input and expected output for a gdb test, and multiple tests may be added to
the same file. The file is read line by line, expecting the following format:
_____________________________________________________________________________

"ignore-all: <regex>"
   The top of the test file may contain any number of these to apply to all tests. If they are found inside
   a test, then they are applied from that point forward in that test.
   All of the tests in the test file will ignore any line matching that regex. This is good for ignoring
   debug messages.

"error: <regex>"
   The top of the test file may contain any number of these to apply to all tests. If they are found inside
   a test, then they are applied from that point forward in that test.
   Any output which ever matches this will instanly be treated as an error and the test will fail.

"test: <test_name>"
   This marks the start of a test. A fresh instance of gdb will be started for each test.

"target: <arguments>"
   This provides the arguments for the `target xstg' command. Environmental variables may be inserted
   using {ENV_VAR} format (as in python str.format strings). To insert a literal `{' use `{{'.
   Note: The referenced environmental variable must exist. It is an error otherwise.
   e.g. To insert the TG_INSTALL environmental variable you may use {TG_INSTALL} in the string.

"file: <file_path>"
   This provides the file to debug with gdb. Environmental variables may be used as in `target' above.

"args: <arg1> [<arg2> ...]"
   This provides the arguments to provide to the program gdb will be debugging. Environmental variables may
   be used as in `target' above.

"in: <gdb_command>"
   This provides a command to gdb. If there is output from the `in' command, all of the output must be parsed
   by the `out' commands (see below) or must be ignored by `ignore-output' (see below). If there is remaining
   output by the time the next `in' command is reached or the test finishes, the test will fail.

"out: <regex>"
    This matches one line of output from the last `in' command to the provided regex. If the line doesn't exist
    or doesn't match, then the test fails immediatly. The regexs used are python regexs (with no flags). Don't
    forget to escape special characters such as *[().+ when needed.
    Note: partial line matches are also possible. You may want to use ^ and $.

"out?: <regex>"
    The same as `out' above, except that it is not a failure if it doesn't match. If it doesn't match then it
    simply gets skipped.

"ignore-output"
    Matches any number of output lines (even zero) regardless of content.
    All remaining output (if any) from the previous `in' command is ignored.

"until: <regex>"
    Consumes all output. If the regex is not matched within this output, then the previous command
    is repeated (up to 32 times) until the correct output is found. If the correct output is never found
    then it is an error. This command must be used immediatly after an "in" command.
_____________________________________________________________________________

Note: Lines that are blank or start with "#" are considered comments.

IMPORTANT NOTE: the syntax must be exact. There must be no leading whitespace and exactly once space
after the colon. Additional whitespace after the colon will be taken literally as part of the regex.
The one exception to this is to provide a blank regex to match an empty line. (ie "out:" or "out?:")
In this case, the space after the colon may be ommited.
