==15193== Memcheck, a memory error detector
==15193== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==15193== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
==15193== Command: ./parallel_bfs /projects/GraphCode/V8M_E128M.txt 1 1
==15193== 
==15193== Warning: set address range perms: large range [0x39027040, 0x5c8d9864) (undefined)
==15193== Conditional jump or move depends on uninitialised value(s)
==15193==    at 0x400CE4: parseEdgeList (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193==    by 0x400FEB: BuildGraph (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193==    by 0x401548: main (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193== 
==15193== 
==15193== More than 10000000 total errors detected.  I'm not reporting any more.
==15193== Final error counts will be inaccurate.  Go fix your program!
==15193== Rerun with --error-limit=no to disable this cutoff.  Note
==15193== that errors may occur in your program without prior warning from
==15193== Valgrind, because errors are no longer being displayed.
==15193== 
==15193== 
==15193== Process terminating with default action of signal 11 (SIGSEGV)
==15193==  Access not within mapped region at address 0x5C8DA000
==15193==    at 0x400CE1: parseEdgeList (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193==    by 0x400FEB: BuildGraph (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193==    by 0x401548: main (in /shared/home/gibbons/APPS/BFS/VIS_Integers/parallel_bfs)
==15193==  If you believe this happened as a result of a stack
==15193==  overflow in your program's main thread (unlikely but
==15193==  possible), you can try to increase the size of the
==15193==  main thread stack using the --main-stacksize= flag.
==15193==  The main thread stack size used in this run was 8388608.
1
2
==15193== 
==15193== HEAP SUMMARY:
==15193==     in use at exit: 980,322,620 bytes in 5 blocks
==15193==   total heap usage: 5 allocs, 0 frees, 980,322,620 bytes allocated
==15193== 
==15193== LEAK SUMMARY:
==15193==    definitely lost: 0 bytes in 0 blocks
==15193==    indirectly lost: 0 bytes in 0 blocks
==15193==      possibly lost: 0 bytes in 0 blocks
==15193==    still reachable: 980,322,620 bytes in 5 blocks
==15193==         suppressed: 0 bytes in 0 blocks
==15193== Rerun with --leak-check=full to see details of leaked memory
==15193== 
==15193== For counts of detected and suppressed errors, rerun with: -v
==15193== Use --track-origins=yes to see where uninitialised values come from
==15193== ERROR SUMMARY: 10000000 errors from 1 contexts (suppressed: 6 from 6)
