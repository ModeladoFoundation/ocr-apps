# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.

# ARCH
ARCH        := x86
# APPS
ifndef APPS_ROOT
$(warning APPS_ROOT not set. Using default path. APPS_ROOT can also be set by sourcing app_env.bash from "apps/"!)
APPS_ROOT ?= ../../../../../apps
endif

# APPLICATION
WORKLOAD_SRC          ?= .
WORKLOAD_BUILD_ROOT   ?= ./build
WORKLOAD_INSTALL_ROOT ?= ./install

# If 0, the workload has no input file
# If 1+, this is the index in the argument
# list after which everything is considered an
# input file. Note that the index STARTS AT 1
WORKLOAD_INPUT_FILE_IDX := 0

# You can specify default arguments here. These
# will be overriden by (in order):
#   - the WORKLOAD_ARGS environment variable
#   - the arguments passed to 'make run'
# To restate, the arguments passed to make run have
# the highest priority and will override both the
# default arguments here and the ones passed through
# an environment variable
WORKLOAD_ARGS ?= --num_refine 2 --npx 1 --npy 1 --npz 1 --nx 8 --ny 8 --nz 8 --num_objects 2 --object 2 0 -0.5 -0.5 -0.5 0.030 0.030 0.030 1.5 1.5 1.5 0.0 0.0 0.0 --object 2 0 0.5 0.5 1.76 0.0 0.0 -0.025 0.75 0.75 0.75 0.0 0.0 0.0 --num_tsteps 100  --checksum_freq 10 --report_diffusion 1 --stages_per_ts 4 --num_vars 2 --uniform_refine 0 --lb_opt 1
#WORKLOAD_ARGS ?= --num_refine 2 --npx 3 --npy 3 --npz 3 --nx 8 --ny 8 --nz 8 --num_objects 1 --object 2 0 -1.71 -1.71 -1.71 0.04 0.04 0.04 1.7 1.7 1.7 0.0 0.0 0.0 --num_tsteps 100 --checksum_freq 1 --num_vars 2 --report_diffusion 1
#WORKLOAD_ARGS ?= --num_refine 2 --init_x 1 --init_y 1 --init_z 1 --npx 4 --npy 2 --npz 2 --nx 8 --ny 8 --nz 8 --num_objects 2 --object 2 0 -1.10 -1.10 -1.10 0.030 0.030 0.030 1.5 1.5 1.5 0.0 0.0 0.0 --object 2 0 0.5 0.5 1.76 0.0 0.0 -0.025 0.75 0.75 0.75 0.0 0.0 0.0 --num_tsteps 100 --checksum_freq 4 --stages_per_ts 16 --report_diffusion 1 --num_vars 40

# Set to yes if running visualizer or export as environment variable
ENABLE_VISUALIZER ?= no

# Run mode (not fully supported)
# Set to "yes" if running with torque
RUN_TORQUE ?= no
# By default, the make system will make sure OCR is properly
# built. You can override this here:
#  - Set to buildApp if you just want to build the app (OCR must be built)
#  - Set to runApp if you just want to run the app (the app and OCR must be built)
# This is mostly used by Jenkins as it splits out the build and run phases for
# a test
RUN_MODE ?=

#set to 1 if you would like to use the static scheduler for this app
STATIC_SCHEDULER ?= 0

# With "restrict" keyword, icc is 1.5x faster for than gcc
#CC := icc

## END of variables coming from user/environment

include ${APPS_ROOT}/makefiles/make-pre.inc

# Name of the application to build
TARGET := miniAMR

# With "restrict" keyword, icc is 1.5x faster for than gcc
# Space separated list of directory names in apps/libs/src
# that need to be built. These will be built for ARCH
REQ_LIBS := reduction ocrAppUtils timer

# Space separated list of source files
SRCS := main.c init.c check_sum.c refine.c move.c block.c comm_refine.c comm_parent.c driver.c \
		comm.c comm_utils.c stencil.c util.c load_balance.c profile.c

CONFIG_FLAGS+=--guid LABELED --binding seq

# Additional CFLAGS. By default, it includes
# all OCR required includes and $(APPS_LIBS_INSTALL)/include
# TG_ARCH is also defined for Fsim
#CFLAGS := -DOCR_ENABLE_EDT_NAMING

FULL_APP ?= 1
CFLAGS += -g -std=c99
CFLAGS += -DENABLE_EXTENSION_AFFINITY
CFLAGS += -DENABLE_EXTENSION_PARAMS_EVT -DENABLE_EXTENSION_COUNTED_EVT
CFLAGS += -DENABLE_EXTENSION_CHANNEL_EVT
CFLAGS += -DWITH_COUNTED_EVT
CFLAGS += -DCHANNEL_EVENTS_AT_RECEIVER
#CFLAGS += -DUSE_LAZY_DB_HINT
#CFLAGS += -DDOUBLE_BUFFERED_EVTS
#CFLAGS += -DUSE_EAGER_DB_HINT
#CFLAGS += -DDEBUG_APP     #To enable DEBUG_PRINTF in the app
#CFLAGS += -DDEBUG_APP_COARSE  #Minimal debug output for quick debugging
CFLAGS += -DPRINTBLOCKSTATS
CFLAGS += -DSHUTDOWN_LAG=2
CFLAGS += -DVERIFICATION_RUN   #You might want to use this to compare the reported checksum to the baseline MPI code, Does not affect performance

ifeq ($(STATIC_SCHEDULER),1)
CFLAGS += -DUSE_STATIC_SCHEDULER
CONFIG_FLAGS += --scheduler STATIC
endif

ifeq ($(ENABLE_PROFILER),yes)
CFLAGS += -DUSE_PROFILER
endif

# Additional LDFLAGS. By default, it includes
# the required OCR library path and $(APPS_LIBS_INSTALL)/lib
# Note that none of the specific libraries specified in
# REQ_LIBS are included.
LDFLAGS := -lpthread -lm -lreduction -ltimer -locrAppUtils $(EXTRALDFLAGS)

# Targets:
#   - all:     Build the application.
#   - debug:   Build the debug version of the application
#   - install: Build and install
#   - run:     Run the application
all:	CFLAGS += -O3
all:	TARGETS := all
all:	default

debug:	CFLAGS += -O0
debug:	TARGETS := debug
debug:	default

install: all

# This rule will be executed prior to execution:
#  - For the TG target, this happens when the binary is built
#  - For all other targets this happens prior to running the
#    executable
# WORKLOAD_ARGS and WORKLOAD_INPUTS are available
# to you and contain, respectively, the non file
# arguments and the file arguments. They will be
# passed directly to the application unless you
# modify them. You can use the following
# syntax to do so:
# $(eval WORKLOAD_INPUTS := something) or
# $(eval WORKLOAD_INPUTS := $(shell <script>))
# The second syntax will execute <script> and assign
# its output to WORKLOAD_INPUTS
#
# You may also want to assign a value to WORKLOAD_OUTS
# which should contain the list of output files produced
# by the application (to be passed to postrun). This is
# taken-care of for you on TG but not on any of the
# other platforms.
# 'prerun: ;' is an empty rule (the rule is required)
.PHONY: prerun
prerun: ;

# This rule will be executed after execution
# The variable ${WORKLOAD_OUTS} contains a space separated
# list of output files
# 'postrun: ;' is an empty rule (the rule is required)
.PHONY: postrun
postrun: ;

# Any additional rules required can go here

# Include common part
include ${APPS_ROOT}/makefiles/make-inc.inc

