# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.

COMM_LAYER=mpi

# APPS
APPS_ROOT       ?= ../../../..
APPS_LIBS_ROOT  ?= ${APPS_ROOT}/libs/x86

# Repo top
REPO_TOP        ?= ${APPS_ROOT}/..

# OCR_TYPE
OCR_TYPE        ?= x86-${COMM_LAYER}

# OCR

OCR_ROOT         ?= ${REPO_TOP}/../ocr/ocr
OCR_INSTALL ?= ${OCR_ROOT}/install
OCR_BUILD_ROOT   ?= ${OCR_ROOT}/build

# APPLICATION
WORKLOAD_SRC          ?= .
WORKLOAD_BUILD_ROOT   ?= ./build
WORKLOAD_INSTALL_ROOT ?= ./install

# If 0, the workload has no input file
# If 1+, this is the index in the argument
# list after which everything is considered an
# input file. Note that the index STARTS AT 1
WORKLOAD_INPUT_FILE_IDX := 0

# You can specify default arguments here. These
# will be overriden by (in order):
#   - the WORKLOAD_ARGS environment variable
#   - the arguments passed to 'make run'
# To restate, the arguments passed to make run have
# the highest priority and will override both the
# default arguments here and the ones passed through
# an environment variable

# Must use blocking sends, otherwise hangs because all the ranks to Irecs, then Isends,
# and then they all wait on the Irecs; and in mpilite none of the Isends has been done,
# so HANG. (Gets part way through with mpilite aggressive "-a" mode)
WORKLOAD_ARGS ?=  -r 3 -t 50 --blocking_send --num_refine 3 --max_blocks 5000 --npx 3  --npy 1 --npz 1 --init_y 3 --init_z 3 --nx 6 --ny 6 --nz 6 --num_objects 1 --object 2 0 -1.71 -1.71 -1.71 0.04 0.04 0.04 1.7 1.7 1.7 0.0 0.0 0.0 --num_tsteps 50 --checksum_freq 1 --report_perf 15 --num_vars 4

#WORKLOAD_ARGS ?= -r 1 -t 50 --blocking_send --num_refine 3 --max_blocks 5000 --npx 1  --npy 1 --npz 1 --init_x 3 --init_y 3 --init_z 3 --nx 6 --ny 6 --nz 6 --num_objects 1 --object 2 0 -1.71 -1.71 -1.71 0.04 0.04 0.04 1.7 1.7 1.7 0.0 0.0 0.0 --num_tsteps 50 --checksum_freq 1 --report_perf 15 --num_vars 4

#WORKLOAD_ARGS ?= -r 27 -t 50 --blocking_send --num_refine 4 --max_blocks 608 --npx 3 --npy 3 --npz 3 --nx 8 --ny 8 --nz 8 --num_objects 1 --object 2 0 -1.71 -1.71 -1.71 0.04 0.04 0.04 1.7 1.7 1.7 0.0 0.0 0.0 --num_tsteps 40 --checksum_freq 1 --report_perf 15 --num_vars 4

# Run mode (not fully supported)
# Set to "yes" if running with torque
RUN_TORQUE ?= no
# Set to "yes" if Jenkins is running this job as an automated test
RUN_JENKINS ?= no
# Set to yes if running visualizer or export as environment variable
ENABLE_VISUALIZER ?= no
## END of variables coming from user/environment

include $(APPS_ROOT)/makefiles/make-pre.inc

# Name of the application to build
TARGET ?= miniAMR

# Space separated list of directory names in apps/libs/src
# that need to be built. These will be built for ARCH
REQ_LIBS := mpilite

# Space separated list of source files
# Use the ROSE translated sources
SRC_NAMES := block.c check_sum.c comm_block.c comm.c comm_parent.c comm_refine.c \
       comm_util.c driver.c init.c main.c move.c pack.c plot.c profile.c \
       rcb.c refine.c stencil.c target.c util.c

SRCS := $(addprefix rose_,$(SRC_NAMES))

OBJS: $(ROSE_TARGET)

# Additional CFLAGS. By default, it includes
# all OCR required includes and apps/libs/<target>/include
# TG_ARCH is also defined for Fsim

CC = mpicc
CFLAGS = -g -std=c99 -DONE_COMM -DMPI_INTEGER=MPI_INT

ifeq ($(OCRRUN_ITAC), yes)
CC=mpiicc
LD=$(CC)
CFLAGS += -fno-omit-frame-pointer
endif

# Additional LDFLAGS. By default, it includes
# the required OCR library path and apps/libs/<target/lib
# Note that none of the specific libraries specified in
# REQ_LIBS are included.
LDFLAGS := -lm -lpthread -lmpilite

# MPILite config file needs LABELED
MPILITE=yes
CONFIG_FLAGS := --guid LABELED  --scheduler LEGACY --dequetype LOCKED_DEQUE

# Targets:
#   - all:     Build the application.
#   - debug:   Build the debug version of the application
#   - install: Build and install
#   - run:     Run the application
all:	CFLAGS += -O3
all:	TARGETS := all
all:	default

debug:	CFLAGS += -O0
debug:	TARGETS := debug
debug:	default

install: all

.DEFAULT_GOAL := install

# This rule will be executed prior to execution:
#  - For the FSim target, this happens when the binary is built
#  - For all other targets this happens prior to running the
#    executable
# WORKLOAD_ARGS and WORKLOAD_INPUTS are available
# to you and contain, respectively, the non file
# arguments and the file arguments. They will be
# passed directly to the application unless you
# modify them. You can use the following
# syntax to do so:
# $(eval WORKLOAD_INPUTS := something) or
# $(eval WORKLOAD_INPUTS := $(shell <script>))
# The second syntax will execute <script> and assign
# its output to WORKLOAD_INPUTS
#
# You may also want to assign a value to WORKLOAD_OUTS
# which should contain the list of output files produced
# by the application (to be passed to postrun). This is
# taken-care of for you on FSim but not on any of the
# other platforms.
# 'prerun: ;' is an empty rule (the rule is required)
.PHONY: prerun
prerun: ;

# ROSE support occurs here.

include ${APPS_ROOT}/makefiles/make-rose.inc

TARGET ?= miniAMR
ROSE_TARGET = rose_$(TARGET)

SRCDIR = $(APPS_ROOT)/miniAMR/refactored/mpilite/intel
BLDDIR = $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)

SRC := $(addprefix $(SRCDIR)/,$(SRC_NAMES))

prebuild: libocr $(ROSE_TARGET)

$(ROSE_TARGET): $(ROSE_TOOL) create_dir
	cd $(BLDDIR) ; \
	$(ROSE_TOOL) $(ROSE_OPT) $(CFLAGS) $(CC_INC) $(SRC) $(LD_FLAGS) $(MPI_FLAGS) >& $(HERE)/build.log ; \
	$(CP) $(SRCDIR)/*.h $(BLDDIR) ; \
	cd $(HERE)


$(ROSE_TOOL):
	cd $(ROSE_TOOL_ROOT)/src ; \
	make ; \
	cd $(HERE)


create_dir:
	mkdir -p $(BLDDIR)


rose: $(ROSE_TOOL) create_dir $(ROSE_TARGET)


# This rule will be executed after execution
# The variable ${WORKLOAD_OUTS} contains a space separated
# list of output files
# 'postrun: ;' is an empty rule (the rule is required
# to be present though)
.PHONY: postrun
postrun: ;

# Include common part
include $(APPS_ROOT)/makefiles/make-ocrrun.inc

