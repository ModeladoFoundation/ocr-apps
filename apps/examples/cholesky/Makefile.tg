# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.

# ARCH
ARCH        := tg-xe
# APPS
APPS_ROOT   ?= ../../../apps
# OCR_TYPE
OCR_TYPE    := tg

# APPLICATION
WORKLOAD_SRC          ?= .
WORKLOAD_BUILD_ROOT   ?= ./build
WORKLOAD_INSTALL_ROOT ?= ./install

# If 0, the workload has no input file
# If 1+, this is the index in the argument
# list after which everything is considered an
# input file. Note that the index STARTS AT 1
WORKLOAD_INPUT_FILE_IDX := 0

# You can specify default arguments here. These
# will be overriden by (in order):
#   - the WORKLOAD_ARGS environment variable
#   - the arguments passed to 'make run'
# To restate, the arguments passed to make run have
# the highest priority and will override both the
# default arguments here and the ones passed through
# an environment variable
#WORKLOAD_ARGS ?=

# Run mode (not fully supported)
# Set to "yes" if running with torque
RUN_TORQUE ?= no
# By default, the make system will make sure OCR is properly
# built. You can override this here:
#  - Set to buildApp if you just want to build the app (OCR must be built)
#  - Set to runApp if you just want to run the app (the app and OCR must be built)
# This is mostly used by Jenkins as it splits out the build and run phases for
# a test
RUN_MODE ?=

# END of variables coming from user/environment

include ${APPS_ROOT}/makefiles/make-pre.inc

# Name of the application to build
TARGET := cholesky

# Space separated list of directory names in apps/libs/src
# that need to be built. These will be built for ARCH
REQ_LIBS := libc macros

# Space separated list of source files
SRCS := cholesky.c

# Additional CFLAGS. By default, it includes
# all OCR required includes and $(APPS_LIBS_INSTALL)/include
# TG_ARCH is also defined for Fsim
CFLAGS :=
# Additional LDFLAGS. By default, it includes
# the required OCR library path and $(APPS_LIBS_INSTALL)/lib
# Note that none of the specific libraries specified in
# REQ_LIBS are included.
LDFLAGS :=

# Targets:
#   - all:     Build the application.
#   - debug:   Build the debug version of the application
#   - install: Build and install
#   - run:     Run the application
#  FIXME bug #871 causes this to be at -O0 and not -O2
all:	CFLAGS += -O0
all:	TARGETS := all
all:	default

debug:	CFLAGS += -O0
debug:	TARGETS := debug
debug:	default

install: all
# We make sure to install this during install so Jenkins
# can run it properly
install: $(WORKLOAD_INSTALL_ROOT)/$(OCR_TYPE)/convertOut.exe

# This rule will be executed prior to execution:
#  - For the TG target, this happens when the binary is built
#  - For all other targets this happens prior to running the
#    executable
# WORKLOAD_ARGS and WORKLOAD_INPUTS are available
# to you and contain, respectively, the non file
# arguments and the file arguments. They will be
# passed directly to the application unless you
# modify them. You can use the following
# syntax to do so:
# $(eval WORKLOAD_INPUTS := something) or
# $(eval WORKLOAD_INPUTS := $(shell <script>))
# The second syntax will execute <script> and assign
# its output to WORKLOAD_INPUTS
#
# You may also want to assign a value to WORKLOAD_OUTS
# which should contain the list of output files produced
# by the application (to be passed to postrun). This is
# taken-care of for you on TG but not on any of the
# other platforms.
# 'prerun: ;' is an empty rule (the rule is required)
.PHONY: prerun
prerun: $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)/convertData.exe
	$(AT)cd $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE) ; \
	./convertData.exe $(WORKLOAD_ARGS) $(WORKLOAD_INPUTS)
	$(AT)$(eval WORKLOAD_INPUTS := $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)/cholesky_out.bin)

# This rule will be executed after execution
# The variable ${WORKLOAD_OUTS} contains a space separated
# list of output files
# 'postrun: ;' is an empty rule (the rule is required)
.PHONY: postrun
postrun: WORKLOAD_EXEC ?= $(WORKLOAD_INSTALL)
postrun: $(WORKLOAD_INSTALL_ROOT)/$(OCR_TYPE)/convertOut.exe
	$(AT)cd $(WORKLOAD_EXEC) ; \
	$(WORKLOAD_INSTALL_ROOT)/$(OCR_TYPE)/convertOut.exe $(WORKLOAD_ARGS) $(WORKLOAD_OUTS) cholesky.out.txt

# Any additional parts

ifneq ($(RUN_MODE), runApp)
$(WORKLOAD_INSTALL_ROOT)/$(OCR_TYPE)/convertOut.exe: $(WORKLOAD_SRC)/convertOut.c
	mkdir -p $(WORKLOAD_INSTALL_ROOT)/$(OCR_TYPE)
	gcc -m64 -o $@ $^

$(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)/convertData.exe: $(WORKLOAD_SRC)/convertData.c
	mkdir -p $(WORKLOAD_BUILD_ROOT)/$(OCR_TYPE)
	gcc -m64 -o $@ $^
endif

# Include common part
include ${APPS_ROOT}/makefiles/make-inc.inc
