#!/usr/bin/env bash
#Date: 2016Nov1
#Author: Donald H Villeneuve (dvillen)
#Goal: Make a C-code analog to Nekbone's ax_e procedure
#Methodology:
#   1) Run the Fortran code holding the functions under test.
#      These functions will generate a single output file F.
#   2) Run the C code holding the functions under test.
#      These functions will generate a single output file C.
#   3) Compare F & C.  They should be identical.
#

CC=icc
FORT='ifort -r8'

FEXEC="./z_fortran.x"
CEXEC="./z_ccode.x"
OUTFORTRAN="./z_fortran.out"
OUTC="./z_ccode.out"

OPT="-g -O0"

#----- Clean-up before starting
rm -f z_* core* "$FEXEC" "$OUTFORTRAN" "$CEXEC" "$OUTC"

#----- Make the executables
rm -f "$FEXEC"
$FORT -o "$FEXEC" nekbone_axi.f90
if [ ! -x "$FEXEC" ]
then
echo "ERROR: Fortran build failure"
exit 20
fi

rm -f "$CEXEC"
$CC -o "$CEXEC" $OPT ax.c blas3.c local_grad.c nekbone_axi.c
if [ ! -x "$CEXEC" ]
then
echo "ERROR: C code build failure"
exit 30
fi

#----- Run the Fortran code
$FEXEC
if [ ! -s "$OUTFORTRAN" ]
then
echo "ERROR: Missing Fortran output file"
exit 40
fi

#----- Run the C code
$CEXEC
if [ ! -s "$OUTC" ]
then
echo "ERROR: Missing C output file"
exit 40
fi

#----- Compare
rtolerance=1e-14
    # grep -P '\S' ==> Remove spurious blank lines
../util/bin/numdiff -r $rtolerance $OUTFORTRAN $OUTC| grep -P '\S' &> z_diff
    # grep -c guarantees a concise output.
theDiff="$(grep -v -c 'are equal' z_diff)"
if [ $theDiff != 0 ]
then
echo "ERROR: Unit test nekbone_local_grad failed."
exit 50
fi

#----- Clean-up
rm -f z_* core* "$FEXEC" "$OUTFORTRAN" "$CEXEC" "$OUTC"

echo "Successful run"
exit 0
