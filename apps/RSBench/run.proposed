#!/bin/bash

#echo $0 $@

source parameters.proposed #App owners, please include this script defining the problem sizes and other parameters.

if [[ "$1" == -h || $# == 0 || $# < $expected_arguments ]]; then
    cat $APPS_ROOT/tools/execution_tools/run.proposed_help
    information #Print application specific information such as memory footprint and type scaling, etc.
    exit 1
fi

source $APPS_ROOT/tools/execution_tools/aux_bash_functions

problem_type=$1
ranks=$2
threads=$3
geometry_scaling=$4
version_dir=$5
app_mode=$6
total_instr_exp_input=""
total_instr_exp=$instructions
run_mode=""

if [[ $# == 8 ]]; then
    total_instr_exp_input=$7
    total_instr_exp=$7
    run_mode=$8
fi

if [[ $# == 7 ]]; then
    if [[ $7 == 'test' || $7 == 'setup' ]]; then
        run_mode=$7
        total_instr_exp=$instructions
    else
        total_instr_exp_input=$7
        total_instr_exp=$7
        run_mode=""
    fi
fi

ranks_input=$ranks
ncopies=$ranks

# This ensures that the problem sizes are determined correctly for n-copies, n-cores/ranks runs
if [[ "$app_mode" == serial* || "$app_mode" == omp* || "$app_mode" == pthreading* ]]; then
    if [[ $ranks_input != 1 ]]; then
        ranks=1
    fi
fi

if [[ "$app_mode" == mpi* || "$app_mode" == hybrid* ]]; then
    ncopies=1
fi

found=$(searchArray $geometry_scaling ${supported_scalings[@]}) #check if the input scaling is supported by the app
if [[ $found == 0 ]]; then
    echo "Error: App only supports (${supported_scalings[@]}) geometry scalings"
    exit 1
fi

A=$instructions_A
B=$instructions_B
MIPS=$MIPS_expected #MIPS per rank

case $problem_type in

"ws_small")
    memory=$memory_ws_small #MB

    input_size=$input_size_ws_small
    np=$np_ws_small
    nw=$nw_ws_small
    nl=$nl_ws_small
    ;;

"ws_large")
    memory=$memory_ws_large #MB

    input_size=$input_size_ws_large
    np=$np_ws_large
    nw=$nw_ws_large
    nl=$nl_ws_large
    ;;

"ss_small")
    memory=$memory_ss_small #MB

    input_size=$input_size_ss_small
    np=$np_ss_small
    nw=$nw_ss_small
    nl=$nl_ss_small
    ;;

"ss_large")
    memory=$memory_ss_large #MB

    input_size=$input_size_ss_large
    np=$np_ss_large
    nw=$nw_ss_large
    nl=$nl_ss_large
    ;;

esac

px=1; py=1; pz=1 #Baseline processor count

case $geometry_scaling in

"1D")
    scaled_dimensions=${scaled_dimensions_1D[@]}
    dimension=1
    ;;
"2D")
    scaled_dimensions=${scaled_dimensions_2D[@]}
    dimension=2
    ;;
"3D")
    scaled_dimensions=${scaled_dimensions_3D[@]}
    dimension=3
    ;;
esac

found=$(isItAPower $ranks $dimension) #check if the rank/rank count is a power ( is ranks == i^$dimensioni ?)

if [[ $found == 0 ]]; then
    echo "Error: Set #ranks to be a power. For 2-D scaling: 4, 9, 16, i^2; For 3-D scaling: 8, 27, i^3; Currently #ranks=$ranks"
    exit 1
fi

ranks_dim=`myroot $ranks $dimension`

scalings=(1 1 1)
for value in ${scaled_dimensions[@]}
do
    scalings[$value-1]=`echo ${scalings[$value-1]}*$ranks_dim | bc`
done

Nx="-"
Ny="-"
Nz="-"

if [[ "$problem_type" == "ws_small" || "$problem_type" == "ws_large" ]]; then
    Nl=$(($nl*$ranks))
fi

if [[ "$problem_type" == "ss_small" || "$problem_type" == "ss_large" ]]; then
    Nl=$nl
fi

px="-"
py="-"
pz="-"

iterations=$Nl

if [[ $iterations -le 0 ]]; then
    iterations=1
fi

# The iterations can be overwritten by specifying negative instructions
if [ $total_instr_exp -le 0 ]; then
    iterations=`echo -1*$total_instr_exp | bc`
fi

v1=0 #`echo "scale=6;($A*$iterations + $B)*$Nx/$px*$Ny/$py*$Nz/$pz" | bc` # per rank
total_instr=`awk -vn1=$v1 'BEGIN{printf("%d\n",n1)}'`

v1=`echo "scale=6; $total_instr/$MIPS/60" | bc` # instructions per rank / MIPS per second; - Result in minutes
wallclock_exp=`awk -vn1=$v1 'BEGIN{printf("%f\n",n1)}'`

if [[ $wallclock_exp == 0 ]]; then
    wallclock_exp=1
fi

print_output()
{
echo " "
printf "%8s | %8s | %8s | %12s | %15s | %15s | %12s | %10s | %18s | %12s\n" "Scaling" "Type" "Ranks" "Threds per" "Problem size" "Rank config" "Memory per" "Iterations" "Instructions per" "Expected time"
printf "%8s | %8s | %8s | %12s | %15s | %15s | %12s | %10s | %18s | %12s\n" "" "" "" "Ranks" "" "" "rank (MB)" "/timesteps" "rank (10^6)" "(mins @${MIPS}MIPS/rank)"
echo   "-----------------------------------------------------------------------------------------------------------------------------------------------"
printf "%8s | %8s | %8d | %12d | %5s%5s%5s | %5s%5s%5s | %12.1f | %10d | %18.3e | %12.0f\n" $geometry_scaling $problem_type $ranks $threads $Nx $Ny $Nz $px $py $pz $memory $iterations $total_instr \
$wallclock_exp
echo " "
}

print_output

appversion=$(basename `pwd`)

# Overwrite these appropriately for various versions of the app (e.g, OMP, MPI, FFWD serial, FFWD OMP, etc.)
make_command="./make_app"
env_command=""
run_command=""

build_and_run_dir="$version_dir/build_and_run/${app_mode}"  #relative to the script directory
#relative to build_and_run_dir
cp_list="Makefile make_app" # From build_and_run_dir to odirname
odirname="$problem_type"#"$ranks_input"#"$threads"#"$geometry_scaling"#"${version_dir//\//_}"#"$app_mode"#"$total_instr_exp_input"

driver_opts=""
app_name="./rsbench"
app_opts="-s ${input_size} -p ${np} -w ${nw} -l ${iterations} -t ${threads}"
extra_opts=""

case $version_dir in

"baseline/omp-serial/doe-original")

    supported_app_modes=("serial" "omp")

    case $app_mode in

    serial*)
        if [[ $ranks != 1 || $threads != 1 ]]; then
            echo "Error: $version_dir supports only ranks=1 and threads=1 in $app_mode"
            exit 1
        fi
        ;;

    omp*)
        env_command="export OMP_NUM_THREADS=$threads"
        if [[ $ranks != 1 ]]; then
            echo "Error: $version_dir supports only ranks=1 in $app_mode"
            exit 1
        fi
        ;;

    *)
        echo "Error: $version_dir only supports {${supported_app_modes[@]}} modes"
        exit 1
        ;;

    esac
    ;;

*)
    echo "Error: Version $version_dir is not supported"
    exit 1
    ;;

esac

run_command="$driver_opts $app_name $app_opts $extra_opts"

case $run_mode in

"test")
 #Simply echo the make and run commands to the console
    echo "Info: The following commands would be run without the \"test\" flag"
    echo "Info: cd $build_and_run_dir"
    echo "Info: rm -r ${odirname}; mkdir -p ${odirname}"
    echo "Info: cp -r -L $cp_list ${odirname}/"
    echo "Info: cd ${odirname}"
    echo "Info: make_command - ${make_command}"
    if [[ $env_command != "" ]]; then echo "Info: env_command  - ${env_command}"; fi
    echo "Info: run_command  - ${run_command}"
    ;;

*)
#For setup: Create input files, make and create a run_command file containing the run command
#Othrewise: Run the application as well
    echo "cd $build_and_run_dir"
    cd $build_and_run_dir
    rm -r ${odirname}; mkdir -p ${odirname}
    echo "cp -r -L $cp_list ${odirname}/"
    cp -r -L $cp_list ${odirname}
    echo "cd ${odirname}"
    cd ${odirname}
    print_output > parameters.out
    echo " Building app in " ${odirname}
    echo "${make_command}"
    eval ${make_command} |& tee make.out

    rm -f run_command
    if [[ ${env_command} != "" ]]; then echo "Export command: ${env_command}"; fi
    if [[ ${env_command} != "" ]]; then echo "${env_command}" >> run_command; fi
    echo "Run command: ${run_command}"
    echo "${run_command}" >> run_command
    chmod 755 run_command

    if [[ $run_mode != "setup" ]]; then
        echo "Running app in " ${odirname}
        ./run_command |& tee run.out
    fi
    ;;

esac

exit 0
