// Author: Manu Shantharam (mshantharam@ucsd.edu)

// Graph context stores the parameters
$context {
  u32 nx, ny, nz; // #unit cells in each direction
  u32 xproc, yproc, zproc; // processors in each direction
  u32 nSteps, doeam;
  u32 printRate;
  real_t  dt, lat, temperature, initialDelta; // other parameters;
};


// item collection declarations
[ struct box *B: i,j,k,l ];   // represents link cell
[ SimFlat *SF: i];  // Contains data related to the simulation system
[ LjPotential *POT: i];
[ struct eamPot *EAMPOT: i];
[ SpeciesData *SPECIES: i];
[ Domain *DD: i ];
[ LinkCell *LC: i ];
[ int *NAtoms: i ];
[ struct myReduction *redc: i, j]; // used for reduction
[ struct atomInfo *AtomInfo: i,j,k ];
[ struct cmdInfo *CMD: i ] ; // initial commandline/default parameters

[ struct timeval *time: i ];

// temporary item collections. Will be destroyed after initialization
[Atoms *ATOMS: i];
[int *GID: i];
[int *ISP: i];
[real3 *R: i];
[real3 *P: i];
[real3 *F: i];
[real_t *U: i];


[ int IT: i ] ; // number of iterations
[ int TBoxes: i ] ; // total number of link cells
[ int Nbs: i ]; // number of neighbors


// Input output relationships
( cleanupInitStep : i )
    <- [ GID : 1 ], [ ISP : 1 ], [ R : 1 ], [ P : 1 ], [ F : 1 ], [ U : 1 ];

( advanceVelocityStep : i, iter )
    <- [ B : i, 0, 0, iter ]
    -> [ B : i, 1, 0, iter], ( updateBoxStep : 0, 0, iter ) ; // generated when i == 0, remaning UpdateBox tags are generated by updateBoxStep

( updateBoxStep : i, k, iter )
    <- [ B : i, 1, 0, iter ], [ TBoxes : 0 ]
    -> ( updateNeighborsStep : i, j, iter ), [ AtomInfo : i, j, iter ], ( generateDataforForceStep : 0, iter );  // generated by the last box

( updateNeighborsStep : i, j, iter )
    <- [ AtomInfo : i, j, iter ], [ B : j, 1, 0, iter ], [ TBoxes : 0 ]
    -> ( updateNeighborsStep : i, k , iter ), [ AtomInfo : i, k , iter ], ( updateBoxStep : i+1, 0, iter ) ; // executed by the "last" neighbor step

(generateDataforForceStep: i, iter)
    <- [ B : i, 1, 0, iter ], [ totalBoxes @ TBoxes : 0 ]
    -> ( generateDataforForceStep : i+1, iter ), ( generateForceTagsStep: iter ); // when i == last box

( generateForceTagsStep : iter )
    <- [ TBoxes : 0 ]
    -> ( forceStep: $RANGE(TBoxes[0]-1), iter ) ;


( forceStep : i, iter )
    <- [ B : i, 1, 0, iter ]
    -> ( computeForcefromNeighborsStep : i, j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,j24,j25,j26, iter ),
       ( computeForcefromNeighborsStep1 : i, j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,j24,j25,j26, iter );  // only if doeam == 1
( computeForcefromNeighborsStep: i, j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,j24,j25,j26, iter )
    <- [ B : i, 1, 0, iter ], [ B : j1, 1, 0, iter ], [ B : j2, 1, 0, iter ], [ B : j3, 1, 0, iter ], [ B : j4, 1, 0, iter ], [ B : j5, 1, 0, iter ], [ B : j6, 1, 0, iter ], [ B : j7, 1, 0, iter ], [ B : j8, 1, 0, iter ], [ B : j9, 1, 0, iter ], [ B : j10, 1, 0, iter ], [ B : j11, 1, 0, iter ], [ B : j12, 1, 0, iter ], [ B : j13, 1, 0, iter ], [ B : j14, 1, 0, iter ], [ B : j15, 1, 0, iter ], [ B : j16, 1, 0, iter ], [ B : j17, 1, 0, iter ], [ B : j18, 1, 0, iter ], [ B : j19, 1, 0, iter ], [ B : j20, 1, 0, iter ], [ B : j21, 1, 0, iter ], [ B : j22, 1, 0, iter ], [ B : j23, 1, 0, iter ], [ B : j24, 1, 0, iter ], [ B : j25, 1, 0, iter ], [ B : j26, 1, 0, iter ], [ EAMPOT : 0]
    -> [ B : i, 4, 0, iter ], // this is produced if doeam == 0
       [ B : i, 3, 0, iter ]; // this is produced if doeam == 1


// this step is executed only if doeam == 1
( computeForcefromNeighborsStep1 : i, j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,j24,j25,j26, iter )
    <- [ B : i, 3, 0, iter ], [ B : j1, 3, 0, iter ], [ B : j2, 3, 0, iter ], [ B : j3, 3, 0, iter ], [ B : j4, 3, 0, iter ], [ B : j5, 3, 0, iter ], [ B : j6, 3, 0, iter ], [ B : j7, 3, 0, iter ], [ B : j8, 3, 0, iter ], [ B : j9, 3, 0, iter ], [ B : j10, 3, 0, iter ], [ B : j11, 3, 0, iter ], [ B : j12, 3, 0, iter ], [ B : j13, 3, 0, iter ], [ B : j14, 3, 0, iter ], [ B : j15, 3, 0, iter ], [ B : j16, 3, 0, iter ], [ B : j17, 3, 0, iter ], [ B : j18, 3, 0, iter ], [ B : j19, 3, 0, iter ], [ B : j20, 3, 0, iter ], [ B : j21, 3, 0, iter ], [ B : j22, 3, 0, iter ], [ B : j23, 3, 0, iter ], [ B : j24, 3, 0, iter ], [ B : j25, 3, 0, iter ], [ B : j26, 3, 0, iter ], [ EAMPOT : 0]
    -> [ B : i, 4, 0, iter ];



( reduceStep : i, iter )
    <- [ B : i, 4, 0, iter ], [redc :0, 1 ], [ IT : 0 ], [ TBoxes : 0 ]
    -> ( reduceStep: i+1, iter ), [ B : i, 0, 0, iter+1 ], [ B : i, 5, 0, iter ], // is executed only when i == 1727 and iter == max_iteration
       ( reduceStep: 0, iter+1 ), ( advanceVelocityStep: i, iter+1 ) ;  // when i = TBoxes[0] and iter < IT[0]

// Write graph inputs and start steps
( $init: () )
    -> [ B : i, 0, 0, 1 ], [ IT : 0 ], [ TBoxes : 0 ], [ Nbs : 0 ],
       ( advanceVelocityStep: i, 1 ), ( generateForceTagsStep : 1 ), ( reduceStep: 0, 1 ), ( cleanupInitStep: 1 ),
       [ time : 0], [ SF : 1 ], [ POT : 1 ], [ SPECIES : 1 ], [ DD : 1 ], [ LC : 1], [ NAtoms : 1 ], [CMD : 1], [ redc : 0, 1],
       [ GID : 1 ], [ ISP : 1 ], [ R : 1 ], [ P : 1 ], [ F : 1 ], [ U : 1 ];

// Return outputs to the caller
( $finalize: i, iter ) <- [ B : i, 5, 0, iter  ], [ r @ redc : i+1, iter], [ start @ time : 0];
