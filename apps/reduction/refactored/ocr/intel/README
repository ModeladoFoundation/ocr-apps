This directory provides a test driver for the reduction library in
apps/libs/src/reduction

See the README in that directory for more details.

The driver implements double precision global sum.

It takes three input parameters:
number of ranks
number of elements to be reduce
number of reductions



Any driver code for the library must:
   create and initialize a reductionPrivate datablock (defined in reduction.h)

However before calling reductionLaunch the user must
  1. create a reductionPrivate datablock for each participating rank
  2. create a clone to receive the result of the reduction
  3. initialize some of the values in the reductionPrivate datablock
      nrank: number of participating ranks
      myrank: my number
      ndata: number of elements to be reduced
      new: set to TRUE for the first call
      reductionOperator: choose which reduction to do (choices in reduction.h)
      rangeGUID: a set of at least nrank-1 labeled STICKY event GUIDs
      returnEVT: an event that each rank will use
         to return the reduced data to the clones.
         Can be reused if made a channel event.
   4. make the clone depend on the returnEVT

It is good hygiene to destroy the datablock that is returned with the answer (will be different on each rank)

After the first call to reductionLaunch, subsequent reductions only require a valid return event


Now the reduction library can be called by the nrank compute EDTs using one call:


Compute the local contribution to be reduced in a datablock

void reductionLaunch(reductionPrivate_t * rpPTR, ocrGuid_t reductionPrivateGUID, void *mydataPTR);

rpPTR is the pointer to my reductionPrivate datablock
reductionPrivateGUID is the guid of my reductionPrivate block
mydataPRT is a pointer to the data to be reduced (will be copied to a separate datablock)

reductionLaunch returns after launching the global sum algorithm.  The calling Edt should terminate soon after
and wait for the clone to wake up.



The library implements a reduction tree invoking the reduction operator at each stage.  This amounts to a global barrier since every node must
contribute to the global reduction before Node zero returns the result by satisfying the event with a separate datablock

Reductions can be run as often as desired.

The available operations are defined in the enum type reductionOperator_t in reduction.h

To add other operations requires three changes:

add the new key word to the enum type reductionOperator_t (in reduction.h);

add the new key word in reductionsizeof (in reductionLib.c)

add the actual operation to reductionOperation (in reductionLib.c)

recompile


