#
# Makefile for autoocr
# Targets:
#    run INPUT=<filename> - runs clang w/the plugin and input src file <filename>
#
#  You can provide plugin args to 'run' via the ARGS var by adding
#  ARGS=<arg> or ARGS="<arg> <arg>..." to the cmd line.
#
#  Understood args are:
#		debug - enable debug prints
#		dump  - dump the rewriten AST (just the functions)
#		legacy  - use legacy (blocking ) OCR
#		-o <fn>  - write translated code to file <fn>
#		help  - print the meager plugin help
#
export APPS_ROOT ?= $(realpath $(CURDIR)/../..)
export OCR_ROOT ?= $(realpath $(CURDIR)/../../../../ocr/ocr)
export TG_ROOT ?= $(realpath $(CURDIR)/../../../../tg/tg)

CLANG_LIB_INC = $(LLVM_BUILD)/lib/clang/3.9.0/include
LLVM_SRC = $(TG_ROOT)/xe-llvm
LLVM_BUILD = $(TG_ROOT)/build/build.xe-llvm/build_llvm

LLVM_INC = $(LLVM_SRC)/include
LLVM_BUILD_INC = $(LLVM_BUILD)/include

CLANG = $(LLVM_BUILD)/bin/clang
CLANG-CHECK = $(LLVM_BUILD)/bin/clang-check
CLANG_INC = $(LLVM_SRC)/tools/clang/include
CLANG_BUILD_INC = $(LLVM_BUILD)/tools/clang/include

APPS_INC = $(APPS_ROOT)/libs/src/newlib/newlib-2.1.0/newlib/libc/include/
#
# All the source files that are part of the plugin
#
SRCS = autoocr.cpp output.cpp rewrite.cpp param_output.cpp output_legacy.cpp
OBJS = $(SRCS:.cpp=.o)
#
# library names
#
LIB = autoocr.so
PLUGIN_NAME = auto-ocr
default: run

#
# targets for running
#
check_args:
	@[ "$(INPUT)" != "" ] || (echo "No input defined!" && exit 1)
	@[ "$(OUTPUT)" != "" ] || (echo "No output defined!" && exit 1)

#
# Turn ARGS into the proper syntax for plugin args
#
override ARGS += -o $(OUTPUT)
PLUGIN_ARGS = $(patsubst %, -plugin-arg-auto-ocr %, $(ARGS))

#
# Run the plugin on input file INPUT
#
run: export LD_LIBRARY_PATH := $(TG_ROOT)/autoocr:$(LD_LIBRARY_PATH)
run: CFLAGS = -DBRG_RNG -I$(APPS_INC) -internal-isystem $(CLANG_LIB_INC)
run: check_args
	@echo Running the $(PLUGIN_NAME) plugin with input $(INPUT)
	@$(CLANG) -cc1 -triple x86_64-linux-elf $(CFLAGS) $(PLUGIN_FLAGS) -fsyntax-only \
	         -load $(LIB) -plugin $(PLUGIN_NAME) $(PLUGIN_ARGS) $(INPUT)

#
# Perform an AST dump on the AST from filename INPUT
#
dump: OUTPUT = $(INPUT:.c=.astdump)
dump: check_args
	@echo Dumping the AST for input $(INPUT) to $(OUTPUT)
	$(CLANG) -cc1 -ast-dump $(INPUT) > $(OUTPUT) 2>&1

list: OUTPUT = $(INPUT:.c=.astlist)
list: check_args
	@echo Listing the AST for input $(INPUT) to $(OUTPUT)
	$(CLANG) -cc1 -ast-list $(INPUT) > $(OUTPUT) 2>&1

check: OUTPUT = $(INPUT:.c=.astcheck)
check: check_args
	@echo Checking the AST for input $(INPUT) to $(OUTPUT)
	$(CLANG-CHECK) input/test.c -ast-dump -ast-dump-filter=node_t > $(OUTPUT) 2>&1

.PHONY: run check_args
